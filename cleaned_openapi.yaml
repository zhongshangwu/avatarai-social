openapi: 3.0.0
info:
  title: OpenAI API
  description: The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference
    for more details.
  version: 2.3.0
  termsOfService: https://openai.com/policies/terms-of-use
  contact:
    name: OpenAI Support
    url: https://help.openai.com/
  license:
    name: MIT
    url: https://github.com/openai/openai-openapi/blob/master/LICENSE
x-oaiMeta:
  navigationGroups:
  - id: responses
    title: Responses
  groups:
  - id: responses
    title: Responses
    description: 'OpenAI''s most advanced interface for generating model responses.
      Supports

      text and image inputs, and text outputs. Create stateful interactions

      with the model, using the output of previous responses as input. Extend

      the model''s capabilities with built-in tools for file search, web search,

      computer use, and more. Allow the model access to external systems and data

      using function calling.


      Related guides:

      - [Quickstart](/docs/quickstart?api-mode=responses)

      - [Text inputs and outputs](/docs/guides/text?api-mode=responses)

      - [Image inputs](/docs/guides/images?api-mode=responses)

      - [Structured Outputs](/docs/guides/structured-outputs?api-mode=responses)

      - [Function calling](/docs/guides/function-calling?api-mode=responses)

      - [Conversation state](/docs/guides/conversation-state?api-mode=responses)

      - [Extend the models with tools](/docs/guides/tools?api-mode=responses)

      '
    navigationGroup: responses
    sections:
    - type: endpoint
      key: createResponse
      path: create
    - type: endpoint
      key: getResponse
      path: get
    - type: endpoint
      key: deleteResponse
      path: delete
    - type: endpoint
      key: listInputItems
      path: input-items
    - type: object
      key: Response
      path: object
    - type: object
      key: ResponseItemList
      path: list
  - id: responses-streaming
    title: Streaming
    description: 'When you [create a Response](/docs/api-reference/responses/create)
      with

      `stream` set to `true`, the server will emit server-sent events to the

      client as the Response is generated. This section contains the events that

      are emitted by the server.


      [Learn more about streaming responses](/docs/guides/streaming-responses?api-mode=responses).

      '
    navigationGroup: responses
    sections:
    - type: object
      key: ResponseCreatedEvent
      path: <auto>
    - type: object
      key: ResponseInProgressEvent
      path: <auto>
    - type: object
      key: ResponseCompletedEvent
      path: <auto>
    - type: object
      key: ResponseFailedEvent
      path: <auto>
    - type: object
      key: ResponseIncompleteEvent
      path: <auto>
    - type: object
      key: ResponseOutputItemAddedEvent
      path: <auto>
    - type: object
      key: ResponseOutputItemDoneEvent
      path: <auto>
    - type: object
      key: ResponseContentPartAddedEvent
      path: <auto>
    - type: object
      key: ResponseContentPartDoneEvent
      path: <auto>
    - type: object
      key: ResponseTextDeltaEvent
      path: <auto>
    - type: object
      key: ResponseTextAnnotationDeltaEvent
      path: <auto>
    - type: object
      key: ResponseTextDoneEvent
      path: <auto>
    - type: object
      key: ResponseRefusalDeltaEvent
      path: <auto>
    - type: object
      key: ResponseRefusalDoneEvent
      path: <auto>
    - type: object
      key: ResponseFunctionCallArgumentsDeltaEvent
      path: <auto>
    - type: object
      key: ResponseFunctionCallArgumentsDoneEvent
      path: <auto>
    - type: object
      key: ResponseFileSearchCallInProgressEvent
      path: <auto>
    - type: object
      key: ResponseFileSearchCallSearchingEvent
      path: <auto>
    - type: object
      key: ResponseFileSearchCallCompletedEvent
      path: <auto>
    - type: object
      key: ResponseWebSearchCallInProgressEvent
      path: <auto>
    - type: object
      key: ResponseWebSearchCallSearchingEvent
      path: <auto>
    - type: object
      key: ResponseWebSearchCallCompletedEvent
      path: <auto>
    - type: object
      key: ResponseReasoningSummaryPartAddedEvent
      path: <auto>
    - type: object
      key: ResponseReasoningSummaryPartDoneEvent
      path: <auto>
    - type: object
      key: ResponseReasoningSummaryTextDeltaEvent
      path: <auto>
    - type: object
      key: ResponseReasoningSummaryTextDoneEvent
      path: <auto>
    - type: object
      key: ResponseErrorEvent
      path: <auto>
paths:
  /responses:
    post:
      operationId: createResponse
      tags:
      - Responses
      summary: 'Creates a model response. Provide [text](/docs/guides/text) or

        [image](/docs/guides/images) inputs to generate [text](/docs/guides/text)

        or [JSON](/docs/guides/structured-outputs) outputs. Have the model call

        your own [custom code](/docs/guides/function-calling) or use built-in

        [tools](/docs/guides/tools) like [web search](/docs/guides/tools-web-search)

        or [file search](/docs/guides/tools-file-search) to use your own data

        as input for the model''s response.

        '
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateResponse'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
            text/event-stream:
              schema:
                $ref: '#/components/schemas/ResponseStreamEvent'
      x-oaiMeta:
        name: Create a model response
        group: responses
        returns: 'Returns a [Response](/docs/api-reference/responses/object) object.

          '
        path: create
        examples:
        - title: Text input
          request:
            curl: "curl https://api.openai.com/v1/responses \\\n  -H \"Content-Type:\
              \ application/json\" \\\n  -H \"Authorization: Bearer $OPENAI_API_KEY\"\
              \ \\\n  -d '{\n    \"model\": \"gpt-4.1\",\n    \"input\": \"Tell me\
              \ a three sentence bedtime story about a unicorn.\"\n  }'\n"
            javascript: "import OpenAI from \"openai\";\n\nconst openai = new OpenAI();\n\
              \nconst response = await openai.responses.create({\n    model: \"gpt-4.1\"\
              ,\n    input: \"Tell me a three sentence bedtime story about a unicorn.\"\
              \n});\n\nconsole.log(response);\n"
            python: "from openai import OpenAI\n\nclient = OpenAI()\n\nresponse =\
              \ client.responses.create(\n  model=\"gpt-4.1\",\n  input=\"Tell me\
              \ a three sentence bedtime story about a unicorn.\"\n)\n\nprint(response)\n"
            csharp: "using System;\nusing OpenAI.Responses;\n\nOpenAIResponseClient\
              \ client = new(\n    model: \"gpt-4.1\",\n    apiKey: Environment.GetEnvironmentVariable(\"\
              OPENAI_API_KEY\")\n);\n\nOpenAIResponse response = client.CreateResponse(\"\
              Tell me a three sentence bedtime story about a unicorn.\");\n\nConsole.WriteLine(response.GetOutputText());\n"
          response: "{\n  \"id\": \"resp_67ccd2bed1ec8190b14f964abc0542670bb6a6b452d3795b\"\
            ,\n  \"object\": \"response\",\n  \"created_at\": 1741476542,\n  \"status\"\
            : \"completed\",\n  \"error\": null,\n  \"incomplete_details\": null,\n\
            \  \"instructions\": null,\n  \"max_output_tokens\": null,\n  \"model\"\
            : \"gpt-4.1-2025-04-14\",\n  \"output\": [\n    {\n      \"type\": \"\
            message\",\n      \"id\": \"msg_67ccd2bf17f0819081ff3bb2cf6508e60bb6a6b452d3795b\"\
            ,\n      \"status\": \"completed\",\n      \"role\": \"assistant\",\n\
            \      \"content\": [\n        {\n          \"type\": \"output_text\"\
            ,\n          \"text\": \"In a peaceful grove beneath a silver moon, a\
            \ unicorn named Lumina discovered a hidden pool that reflected the stars.\
            \ As she dipped her horn into the water, the pool began to shimmer, revealing\
            \ a pathway to a magical realm of endless night skies. Filled with wonder,\
            \ Lumina whispered a wish for all who dream to find their own hidden magic,\
            \ and as she glanced back, her hoofprints sparkled like stardust.\",\n\
            \          \"annotations\": []\n        }\n      ]\n    }\n  ],\n  \"\
            parallel_tool_calls\": true,\n  \"previous_response_id\": null,\n  \"\
            reasoning\": {\n    \"effort\": null,\n    \"summary\": null\n  },\n \
            \ \"store\": true,\n  \"temperature\": 1.0,\n  \"text\": {\n    \"format\"\
            : {\n      \"type\": \"text\"\n    }\n  },\n  \"tool_choice\": \"auto\"\
            ,\n  \"tools\": [],\n  \"top_p\": 1.0,\n  \"truncation\": \"disabled\"\
            ,\n  \"usage\": {\n    \"input_tokens\": 36,\n    \"input_tokens_details\"\
            : {\n      \"cached_tokens\": 0\n    },\n    \"output_tokens\": 87,\n\
            \    \"output_tokens_details\": {\n      \"reasoning_tokens\": 0\n   \
            \ },\n    \"total_tokens\": 123\n  },\n  \"user\": null,\n  \"metadata\"\
            : {}\n}\n"
        - title: Image input
          request:
            curl: "curl https://api.openai.com/v1/responses \\\n  -H \"Content-Type:\
              \ application/json\" \\\n  -H \"Authorization: Bearer $OPENAI_API_KEY\"\
              \ \\\n  -d '{\n    \"model\": \"gpt-4.1\",\n    \"input\": [\n     \
              \ {\n        \"role\": \"user\",\n        \"content\": [\n         \
              \ {\"type\": \"input_text\", \"text\": \"what is in this image?\"},\n\
              \          {\n            \"type\": \"input_image\",\n            \"\
              image_url\": \"https://upload.wikimedia.org/wikipedia/commons/thumb/d/dd/Gfp-wisconsin-madison-the-nature-boardwalk.jpg/2560px-Gfp-wisconsin-madison-the-nature-boardwalk.jpg\"\
              \n          }\n        ]\n      }\n    ]\n  }'\n"
            javascript: "import OpenAI from \"openai\";\n\nconst openai = new OpenAI();\n\
              \nconst response = await openai.responses.create({\n    model: \"gpt-4.1\"\
              ,\n    input: [\n        {\n            role: \"user\",\n          \
              \  content: [\n                { type: \"input_text\", text: \"what\
              \ is in this image?\" },\n                {\n                    type:\
              \ \"input_image\",\n                    image_url:\n               \
              \         \"https://upload.wikimedia.org/wikipedia/commons/thumb/d/dd/Gfp-wisconsin-madison-the-nature-boardwalk.jpg/2560px-Gfp-wisconsin-madison-the-nature-boardwalk.jpg\"\
              ,\n                },\n            ],\n        },\n    ],\n});\n\nconsole.log(response);\n"
            python: "from openai import OpenAI\n\nclient = OpenAI()\n\nresponse =\
              \ client.responses.create(\n    model=\"gpt-4.1\",\n    input=[\n  \
              \      {\n            \"role\": \"user\",\n            \"content\":\
              \ [\n                { \"type\": \"input_text\", \"text\": \"what is\
              \ in this image?\" },\n                {\n                    \"type\"\
              : \"input_image\",\n                    \"image_url\": \"https://upload.wikimedia.org/wikipedia/commons/thumb/d/dd/Gfp-wisconsin-madison-the-nature-boardwalk.jpg/2560px-Gfp-wisconsin-madison-the-nature-boardwalk.jpg\"\
              \n                }\n            ]\n        }\n    ]\n)\n\nprint(response)\n"
            csharp: "using System;\nusing System.Collections.Generic;\n\nusing OpenAI.Responses;\n\
              \nOpenAIResponseClient client = new(\n    model: \"gpt-4.1\",\n    apiKey:\
              \ Environment.GetEnvironmentVariable(\"OPENAI_API_KEY\")\n);\n\nList<ResponseItem>\
              \ inputItems =\n[\n    ResponseItem.CreateUserMessageItem(\n       \
              \ [\n            ResponseContentPart.CreateInputTextPart(\"What is in\
              \ this image?\"),\n            ResponseContentPart.CreateInputImagePart(new\
              \ Uri(\"https://upload.wikimedia.org/wikipedia/commons/thumb/d/dd/Gfp-wisconsin-madison-the-nature-boardwalk.jpg/2560px-Gfp-wisconsin-madison-the-nature-boardwalk.jpg\"\
              ))\n        ]\n    )\n];\n\nOpenAIResponse response = client.CreateResponse(inputItems);\n\
              \nConsole.WriteLine(response.GetOutputText());\n"
          response: "{\n  \"id\": \"resp_67ccd3a9da748190baa7f1570fe91ac604becb25c45c1d41\"\
            ,\n  \"object\": \"response\",\n  \"created_at\": 1741476777,\n  \"status\"\
            : \"completed\",\n  \"error\": null,\n  \"incomplete_details\": null,\n\
            \  \"instructions\": null,\n  \"max_output_tokens\": null,\n  \"model\"\
            : \"gpt-4.1-2025-04-14\",\n  \"output\": [\n    {\n      \"type\": \"\
            message\",\n      \"id\": \"msg_67ccd3acc8d48190a77525dc6de64b4104becb25c45c1d41\"\
            ,\n      \"status\": \"completed\",\n      \"role\": \"assistant\",\n\
            \      \"content\": [\n        {\n          \"type\": \"output_text\"\
            ,\n          \"text\": \"The image depicts a scenic landscape with a wooden\
            \ boardwalk or pathway leading through lush, green grass under a blue\
            \ sky with some clouds. The setting suggests a peaceful natural area,\
            \ possibly a park or nature reserve. There are trees and shrubs in the\
            \ background.\",\n          \"annotations\": []\n        }\n      ]\n\
            \    }\n  ],\n  \"parallel_tool_calls\": true,\n  \"previous_response_id\"\
            : null,\n  \"reasoning\": {\n    \"effort\": null,\n    \"summary\": null\n\
            \  },\n  \"store\": true,\n  \"temperature\": 1.0,\n  \"text\": {\n  \
            \  \"format\": {\n      \"type\": \"text\"\n    }\n  },\n  \"tool_choice\"\
            : \"auto\",\n  \"tools\": [],\n  \"top_p\": 1.0,\n  \"truncation\": \"\
            disabled\",\n  \"usage\": {\n    \"input_tokens\": 328,\n    \"input_tokens_details\"\
            : {\n      \"cached_tokens\": 0\n    },\n    \"output_tokens\": 52,\n\
            \    \"output_tokens_details\": {\n      \"reasoning_tokens\": 0\n   \
            \ },\n    \"total_tokens\": 380\n  },\n  \"user\": null,\n  \"metadata\"\
            : {}\n}\n"
        - title: Web search
          request:
            curl: "curl https://api.openai.com/v1/responses \\\n  -H \"Content-Type:\
              \ application/json\" \\\n  -H \"Authorization: Bearer $OPENAI_API_KEY\"\
              \ \\\n  -d '{\n    \"model\": \"gpt-4.1\",\n    \"tools\": [{ \"type\"\
              : \"web_search_preview\" }],\n    \"input\": \"What was a positive news\
              \ story from today?\"\n  }'\n"
            javascript: "import OpenAI from \"openai\";\n\nconst openai = new OpenAI();\n\
              \nconst response = await openai.responses.create({\n    model: \"gpt-4.1\"\
              ,\n    tools: [{ type: \"web_search_preview\" }],\n    input: \"What\
              \ was a positive news story from today?\",\n});\n\nconsole.log(response);\n"
            python: "from openai import OpenAI\n\nclient = OpenAI()\n\nresponse =\
              \ client.responses.create(\n    model=\"gpt-4.1\",\n    tools=[{ \"\
              type\": \"web_search_preview\" }],\n    input=\"What was a positive\
              \ news story from today?\",\n)\n\nprint(response)\n"
            csharp: "using System;\n\nusing OpenAI.Responses;\n\nOpenAIResponseClient\
              \ client = new(\n    model: \"gpt-4.1\",\n    apiKey: Environment.GetEnvironmentVariable(\"\
              OPENAI_API_KEY\")\n);\n\nstring userInputText = \"What was a positive\
              \ news story from today?\";\n\nResponseCreationOptions options = new()\n\
              {\n    Tools =\n    {\n        ResponseTool.CreateWebSearchTool()\n\
              \    },\n};\n\nOpenAIResponse response = client.CreateResponse(userInputText,\
              \ options);\n\nConsole.WriteLine(response.GetOutputText());\n"
          response: "{\n  \"id\": \"resp_67ccf18ef5fc8190b16dbee19bc54e5f087bb177ab789d5c\"\
            ,\n  \"object\": \"response\",\n  \"created_at\": 1741484430,\n  \"status\"\
            : \"completed\",\n  \"error\": null,\n  \"incomplete_details\": null,\n\
            \  \"instructions\": null,\n  \"max_output_tokens\": null,\n  \"model\"\
            : \"gpt-4.1-2025-04-14\",\n  \"output\": [\n    {\n      \"type\": \"\
            web_search_call\",\n      \"id\": \"ws_67ccf18f64008190a39b619f4c8455ef087bb177ab789d5c\"\
            ,\n      \"status\": \"completed\"\n    },\n    {\n      \"type\": \"\
            message\",\n      \"id\": \"msg_67ccf190ca3881909d433c50b1f6357e087bb177ab789d5c\"\
            ,\n      \"status\": \"completed\",\n      \"role\": \"assistant\",\n\
            \      \"content\": [\n        {\n          \"type\": \"output_text\"\
            ,\n          \"text\": \"As of today, March 9, 2025, one notable positive\
            \ news story...\",\n          \"annotations\": [\n            {\n    \
            \          \"type\": \"url_citation\",\n              \"start_index\"\
            : 442,\n              \"end_index\": 557,\n              \"url\": \"https://.../?utm_source=chatgpt.com\"\
            ,\n              \"title\": \"...\"\n            },\n            {\n \
            \             \"type\": \"url_citation\",\n              \"start_index\"\
            : 962,\n              \"end_index\": 1077,\n              \"url\": \"\
            https://.../?utm_source=chatgpt.com\",\n              \"title\": \"...\"\
            \n            },\n            {\n              \"type\": \"url_citation\"\
            ,\n              \"start_index\": 1336,\n              \"end_index\":\
            \ 1451,\n              \"url\": \"https://.../?utm_source=chatgpt.com\"\
            ,\n              \"title\": \"...\"\n            }\n          ]\n    \
            \    }\n      ]\n    }\n  ],\n  \"parallel_tool_calls\": true,\n  \"previous_response_id\"\
            : null,\n  \"reasoning\": {\n    \"effort\": null,\n    \"summary\": null\n\
            \  },\n  \"store\": true,\n  \"temperature\": 1.0,\n  \"text\": {\n  \
            \  \"format\": {\n      \"type\": \"text\"\n    }\n  },\n  \"tool_choice\"\
            : \"auto\",\n  \"tools\": [\n    {\n      \"type\": \"web_search_preview\"\
            ,\n      \"domains\": [],\n      \"search_context_size\": \"medium\",\n\
            \      \"user_location\": {\n        \"type\": \"approximate\",\n    \
            \    \"city\": null,\n        \"country\": \"US\",\n        \"region\"\
            : null,\n        \"timezone\": null\n      }\n    }\n  ],\n  \"top_p\"\
            : 1.0,\n  \"truncation\": \"disabled\",\n  \"usage\": {\n    \"input_tokens\"\
            : 328,\n    \"input_tokens_details\": {\n      \"cached_tokens\": 0\n\
            \    },\n    \"output_tokens\": 356,\n    \"output_tokens_details\": {\n\
            \      \"reasoning_tokens\": 0\n    },\n    \"total_tokens\": 684\n  },\n\
            \  \"user\": null,\n  \"metadata\": {}\n}\n"
        - title: File search
          request:
            curl: "curl https://api.openai.com/v1/responses \\\n  -H \"Content-Type:\
              \ application/json\" \\\n  -H \"Authorization: Bearer $OPENAI_API_KEY\"\
              \ \\\n  -d '{\n    \"model\": \"gpt-4.1\",\n    \"tools\": [{\n    \
              \  \"type\": \"file_search\",\n      \"vector_store_ids\": [\"vs_1234567890\"\
              ],\n      \"max_num_results\": 20\n    }],\n    \"input\": \"What are\
              \ the attributes of an ancient brown dragon?\"\n  }'\n"
            javascript: "import OpenAI from \"openai\";\n\nconst openai = new OpenAI();\n\
              \nconst response = await openai.responses.create({\n    model: \"gpt-4.1\"\
              ,\n    tools: [{\n      type: \"file_search\",\n      vector_store_ids:\
              \ [\"vs_1234567890\"],\n      max_num_results: 20\n    }],\n    input:\
              \ \"What are the attributes of an ancient brown dragon?\",\n});\n\n\
              console.log(response);\n"
            python: "from openai import OpenAI\n\nclient = OpenAI()\n\nresponse =\
              \ client.responses.create(\n    model=\"gpt-4.1\",\n    tools=[{\n \
              \     \"type\": \"file_search\",\n      \"vector_store_ids\": [\"vs_1234567890\"\
              ],\n      \"max_num_results\": 20\n    }],\n    input=\"What are the\
              \ attributes of an ancient brown dragon?\",\n)\n\nprint(response)\n"
            csharp: "using System;\n\nusing OpenAI.Responses;\n\nOpenAIResponseClient\
              \ client = new(\n    model: \"gpt-4.1\",\n    apiKey: Environment.GetEnvironmentVariable(\"\
              OPENAI_API_KEY\")\n);\n\nstring userInputText = \"What are the attributes\
              \ of an ancient brown dragon?\";\n\nResponseCreationOptions options\
              \ = new()\n{\n    Tools =\n    {\n        ResponseTool.CreateFileSearchTool(\n\
              \            vectorStoreIds: [\"vs_1234567890\"],\n            maxResultCount:\
              \ 20\n        )\n    },\n};\n\nOpenAIResponse response = client.CreateResponse(userInputText,\
              \ options);\n\nConsole.WriteLine(response.GetOutputText());\n"
          response: "{\n  \"id\": \"resp_67ccf4c55fc48190b71bd0463ad3306d09504fb6872380d7\"\
            ,\n  \"object\": \"response\",\n  \"created_at\": 1741485253,\n  \"status\"\
            : \"completed\",\n  \"error\": null,\n  \"incomplete_details\": null,\n\
            \  \"instructions\": null,\n  \"max_output_tokens\": null,\n  \"model\"\
            : \"gpt-4.1-2025-04-14\",\n  \"output\": [\n    {\n      \"type\": \"\
            file_search_call\",\n      \"id\": \"fs_67ccf4c63cd08190887ef6464ba5681609504fb6872380d7\"\
            ,\n      \"status\": \"completed\",\n      \"queries\": [\n        \"\
            attributes of an ancient brown dragon\"\n      ],\n      \"results\":\
            \ null\n    },\n    {\n      \"type\": \"message\",\n      \"id\": \"\
            msg_67ccf4c93e5c81909d595b369351a9d309504fb6872380d7\",\n      \"status\"\
            : \"completed\",\n      \"role\": \"assistant\",\n      \"content\": [\n\
            \        {\n          \"type\": \"output_text\",\n          \"text\":\
            \ \"The attributes of an ancient brown dragon include...\",\n        \
            \  \"annotations\": [\n            {\n              \"type\": \"file_citation\"\
            ,\n              \"index\": 320,\n              \"file_id\": \"file-4wDz5b167pAf72nx1h9eiN\"\
            ,\n              \"filename\": \"dragons.pdf\"\n            },\n     \
            \       {\n              \"type\": \"file_citation\",\n              \"\
            index\": 576,\n              \"file_id\": \"file-4wDz5b167pAf72nx1h9eiN\"\
            ,\n              \"filename\": \"dragons.pdf\"\n            },\n     \
            \       {\n              \"type\": \"file_citation\",\n              \"\
            index\": 815,\n              \"file_id\": \"file-4wDz5b167pAf72nx1h9eiN\"\
            ,\n              \"filename\": \"dragons.pdf\"\n            },\n     \
            \       {\n              \"type\": \"file_citation\",\n              \"\
            index\": 815,\n              \"file_id\": \"file-4wDz5b167pAf72nx1h9eiN\"\
            ,\n              \"filename\": \"dragons.pdf\"\n            },\n     \
            \       {\n              \"type\": \"file_citation\",\n              \"\
            index\": 1030,\n              \"file_id\": \"file-4wDz5b167pAf72nx1h9eiN\"\
            ,\n              \"filename\": \"dragons.pdf\"\n            },\n     \
            \       {\n              \"type\": \"file_citation\",\n              \"\
            index\": 1030,\n              \"file_id\": \"file-4wDz5b167pAf72nx1h9eiN\"\
            ,\n              \"filename\": \"dragons.pdf\"\n            },\n     \
            \       {\n              \"type\": \"file_citation\",\n              \"\
            index\": 1156,\n              \"file_id\": \"file-4wDz5b167pAf72nx1h9eiN\"\
            ,\n              \"filename\": \"dragons.pdf\"\n            },\n     \
            \       {\n              \"type\": \"file_citation\",\n              \"\
            index\": 1225,\n              \"file_id\": \"file-4wDz5b167pAf72nx1h9eiN\"\
            ,\n              \"filename\": \"dragons.pdf\"\n            }\n      \
            \    ]\n        }\n      ]\n    }\n  ],\n  \"parallel_tool_calls\": true,\n\
            \  \"previous_response_id\": null,\n  \"reasoning\": {\n    \"effort\"\
            : null,\n    \"summary\": null\n  },\n  \"store\": true,\n  \"temperature\"\
            : 1.0,\n  \"text\": {\n    \"format\": {\n      \"type\": \"text\"\n \
            \   }\n  },\n  \"tool_choice\": \"auto\",\n  \"tools\": [\n    {\n   \
            \   \"type\": \"file_search\",\n      \"filters\": null,\n      \"max_num_results\"\
            : 20,\n      \"ranking_options\": {\n        \"ranker\": \"auto\",\n \
            \       \"score_threshold\": 0.0\n      },\n      \"vector_store_ids\"\
            : [\n        \"vs_1234567890\"\n      ]\n    }\n  ],\n  \"top_p\": 1.0,\n\
            \  \"truncation\": \"disabled\",\n  \"usage\": {\n    \"input_tokens\"\
            : 18307,\n    \"input_tokens_details\": {\n      \"cached_tokens\": 0\n\
            \    },\n    \"output_tokens\": 348,\n    \"output_tokens_details\": {\n\
            \      \"reasoning_tokens\": 0\n    },\n    \"total_tokens\": 18655\n\
            \  },\n  \"user\": null,\n  \"metadata\": {}\n}\n"
        - title: Streaming
          request:
            curl: "curl https://api.openai.com/v1/responses \\\n  -H \"Content-Type:\
              \ application/json\" \\\n  -H \"Authorization: Bearer $OPENAI_API_KEY\"\
              \ \\\n  -d '{\n    \"model\": \"gpt-4.1\",\n    \"instructions\": \"\
              You are a helpful assistant.\",\n    \"input\": \"Hello!\",\n    \"\
              stream\": true\n  }'\n"
            python: "from openai import OpenAI\n\nclient = OpenAI()\n\nresponse =\
              \ client.responses.create(\n  model=\"gpt-4.1\",\n  instructions=\"\
              You are a helpful assistant.\",\n  input=\"Hello!\",\n  stream=True\n\
              )\n\nfor event in response:\n  print(event)\n"
            javascript: "import OpenAI from \"openai\";\n\nconst openai = new OpenAI();\n\
              \nconst response = await openai.responses.create({\n    model: \"gpt-4.1\"\
              ,\n    instructions: \"You are a helpful assistant.\",\n    input: \"\
              Hello!\",\n    stream: true,\n});\n\nfor await (const event of response)\
              \ {\n    console.log(event);\n}\n"
            csharp: "using System;\nusing System.ClientModel;\nusing System.Threading.Tasks;\n\
              \nusing OpenAI.Responses;\n\nOpenAIResponseClient client = new(\n  \
              \  model: \"gpt-4.1\",\n    apiKey: Environment.GetEnvironmentVariable(\"\
              OPENAI_API_KEY\")\n);\n\nstring userInputText = \"Hello!\";\n\nResponseCreationOptions\
              \ options = new()\n{\n    Instructions = \"You are a helpful assistant.\"\
              ,\n};\n\nAsyncCollectionResult<StreamingResponseUpdate> responseUpdates\
              \ = client.CreateResponseStreamingAsync(userInputText, options);\n\n\
              await foreach (StreamingResponseUpdate responseUpdate in responseUpdates)\n\
              {\n    if (responseUpdate is StreamingResponseOutputTextDeltaUpdate\
              \ outputTextDeltaUpdate)\n    {\n        Console.Write(outputTextDeltaUpdate.Delta);\n\
              \    }\n}\n"
          response: 'event: response.created

            data: {"type":"response.created","response":{"id":"resp_67c9fdcecf488190bdd9a0409de3a1ec07b8b0ad4e5eb654","object":"response","created_at":1741290958,"status":"in_progress","error":null,"incomplete_details":null,"instructions":"You
            are a helpful assistant.","max_output_tokens":null,"model":"gpt-4.1-2025-04-14","output":[],"parallel_tool_calls":true,"previous_response_id":null,"reasoning":{"effort":null,"summary":null},"store":true,"temperature":1.0,"text":{"format":{"type":"text"}},"tool_choice":"auto","tools":[],"top_p":1.0,"truncation":"disabled","usage":null,"user":null,"metadata":{}}}


            event: response.in_progress

            data: {"type":"response.in_progress","response":{"id":"resp_67c9fdcecf488190bdd9a0409de3a1ec07b8b0ad4e5eb654","object":"response","created_at":1741290958,"status":"in_progress","error":null,"incomplete_details":null,"instructions":"You
            are a helpful assistant.","max_output_tokens":null,"model":"gpt-4.1-2025-04-14","output":[],"parallel_tool_calls":true,"previous_response_id":null,"reasoning":{"effort":null,"summary":null},"store":true,"temperature":1.0,"text":{"format":{"type":"text"}},"tool_choice":"auto","tools":[],"top_p":1.0,"truncation":"disabled","usage":null,"user":null,"metadata":{}}}


            event: response.output_item.added

            data: {"type":"response.output_item.added","output_index":0,"item":{"id":"msg_67c9fdcf37fc8190ba82116e33fb28c507b8b0ad4e5eb654","type":"message","status":"in_progress","role":"assistant","content":[]}}


            event: response.content_part.added

            data: {"type":"response.content_part.added","item_id":"msg_67c9fdcf37fc8190ba82116e33fb28c507b8b0ad4e5eb654","output_index":0,"content_index":0,"part":{"type":"output_text","text":"","annotations":[]}}


            event: response.output_text.delta

            data: {"type":"response.output_text.delta","item_id":"msg_67c9fdcf37fc8190ba82116e33fb28c507b8b0ad4e5eb654","output_index":0,"content_index":0,"delta":"Hi"}


            ...


            event: response.output_text.done

            data: {"type":"response.output_text.done","item_id":"msg_67c9fdcf37fc8190ba82116e33fb28c507b8b0ad4e5eb654","output_index":0,"content_index":0,"text":"Hi
            there! How can I assist you today?"}


            event: response.content_part.done

            data: {"type":"response.content_part.done","item_id":"msg_67c9fdcf37fc8190ba82116e33fb28c507b8b0ad4e5eb654","output_index":0,"content_index":0,"part":{"type":"output_text","text":"Hi
            there! How can I assist you today?","annotations":[]}}


            event: response.output_item.done

            data: {"type":"response.output_item.done","output_index":0,"item":{"id":"msg_67c9fdcf37fc8190ba82116e33fb28c507b8b0ad4e5eb654","type":"message","status":"completed","role":"assistant","content":[{"type":"output_text","text":"Hi
            there! How can I assist you today?","annotations":[]}]}}


            event: response.completed

            data: {"type":"response.completed","response":{"id":"resp_67c9fdcecf488190bdd9a0409de3a1ec07b8b0ad4e5eb654","object":"response","created_at":1741290958,"status":"completed","error":null,"incomplete_details":null,"instructions":"You
            are a helpful assistant.","max_output_tokens":null,"model":"gpt-4.1-2025-04-14","output":[{"id":"msg_67c9fdcf37fc8190ba82116e33fb28c507b8b0ad4e5eb654","type":"message","status":"completed","role":"assistant","content":[{"type":"output_text","text":"Hi
            there! How can I assist you today?","annotations":[]}]}],"parallel_tool_calls":true,"previous_response_id":null,"reasoning":{"effort":null,"summary":null},"store":true,"temperature":1.0,"text":{"format":{"type":"text"}},"tool_choice":"auto","tools":[],"top_p":1.0,"truncation":"disabled","usage":{"input_tokens":37,"output_tokens":11,"output_tokens_details":{"reasoning_tokens":0},"total_tokens":48},"user":null,"metadata":{}}}

            '
        - title: Functions
          request:
            curl: "curl https://api.openai.com/v1/responses \\\n  -H \"Content-Type:\
              \ application/json\" \\\n  -H \"Authorization: Bearer $OPENAI_API_KEY\"\
              \ \\\n  -d '{\n    \"model\": \"gpt-4.1\",\n    \"input\": \"What is\
              \ the weather like in Boston today?\",\n    \"tools\": [\n      {\n\
              \        \"type\": \"function\",\n        \"name\": \"get_current_weather\"\
              ,\n        \"description\": \"Get the current weather in a given location\"\
              ,\n        \"parameters\": {\n          \"type\": \"object\",\n    \
              \      \"properties\": {\n            \"location\": {\n            \
              \  \"type\": \"string\",\n              \"description\": \"The city\
              \ and state, e.g. San Francisco, CA\"\n            },\n            \"\
              unit\": {\n              \"type\": \"string\",\n              \"enum\"\
              : [\"celsius\", \"fahrenheit\"]\n            }\n          },\n     \
              \     \"required\": [\"location\", \"unit\"]\n        }\n      }\n \
              \   ],\n    \"tool_choice\": \"auto\"\n  }'\n"
            python: "from openai import OpenAI\n\nclient = OpenAI()\n\ntools = [\n\
              \    {\n        \"type\": \"function\",\n        \"name\": \"get_current_weather\"\
              ,\n        \"description\": \"Get the current weather in a given location\"\
              ,\n        \"parameters\": {\n          \"type\": \"object\",\n    \
              \      \"properties\": {\n              \"location\": {\n          \
              \        \"type\": \"string\",\n                  \"description\": \"\
              The city and state, e.g. San Francisco, CA\",\n              },\n  \
              \            \"unit\": {\"type\": \"string\", \"enum\": [\"celsius\"\
              , \"fahrenheit\"]},\n          },\n          \"required\": [\"location\"\
              , \"unit\"],\n        }\n    }\n]\n\nresponse = client.responses.create(\n\
              \  model=\"gpt-4.1\",\n  tools=tools,\n  input=\"What is the weather\
              \ like in Boston today?\",\n  tool_choice=\"auto\"\n)\n\nprint(response)\n"
            javascript: "import OpenAI from \"openai\";\n\nconst openai = new OpenAI();\n\
              \nconst tools = [\n    {\n        type: \"function\",\n        name:\
              \ \"get_current_weather\",\n        description: \"Get the current weather\
              \ in a given location\",\n        parameters: {\n            type: \"\
              object\",\n            properties: {\n                location: {\n\
              \                    type: \"string\",\n                    description:\
              \ \"The city and state, e.g. San Francisco, CA\",\n                },\n\
              \                unit: { type: \"string\", enum: [\"celsius\", \"fahrenheit\"\
              ] },\n            },\n            required: [\"location\", \"unit\"\
              ],\n        },\n    },\n];\n\nconst response = await openai.responses.create({\n\
              \    model: \"gpt-4.1\",\n    tools: tools,\n    input: \"What is the\
              \ weather like in Boston today?\",\n    tool_choice: \"auto\",\n});\n\
              \nconsole.log(response);\n"
            csharp: "using System;\nusing OpenAI.Responses;\n\nOpenAIResponseClient\
              \ client = new(\n    model: \"gpt-4.1\",\n    apiKey: Environment.GetEnvironmentVariable(\"\
              OPENAI_API_KEY\")\n);\n\nResponseTool getCurrentWeatherFunctionTool\
              \ = ResponseTool.CreateFunctionTool(\n    functionName: \"get_current_weather\"\
              ,\n    functionDescription: \"Get the current weather in a given location\"\
              ,\n    functionParameters: BinaryData.FromString(\"\"\"\n        {\n\
              \            \"type\": \"object\",\n            \"properties\": {\n\
              \                \"location\": {\n                    \"type\": \"string\"\
              ,\n                    \"description\": \"The city and state, e.g. San\
              \ Francisco, CA\"\n                },\n                \"unit\": {\"\
              type\": \"string\", \"enum\": [\"celsius\", \"fahrenheit\"]}\n     \
              \       },\n            \"required\": [\"location\", \"unit\"]\n   \
              \     }\n        \"\"\"\n    )\n);\n\nstring userInputText = \"What\
              \ is the weather like in Boston today?\";\n\nResponseCreationOptions\
              \ options = new()\n{\n    Tools =\n    {\n        getCurrentWeatherFunctionTool\n\
              \    },\n    ToolChoice = ResponseToolChoice.CreateAutoChoice(),\n};\n\
              \nOpenAIResponse response = client.CreateResponse(userInputText, options);\n"
          response: "{\n  \"id\": \"resp_67ca09c5efe0819096d0511c92b8c890096610f474011cc0\"\
            ,\n  \"object\": \"response\",\n  \"created_at\": 1741294021,\n  \"status\"\
            : \"completed\",\n  \"error\": null,\n  \"incomplete_details\": null,\n\
            \  \"instructions\": null,\n  \"max_output_tokens\": null,\n  \"model\"\
            : \"gpt-4.1-2025-04-14\",\n  \"output\": [\n    {\n      \"type\": \"\
            function_call\",\n      \"id\": \"fc_67ca09c6bedc8190a7abfec07b1a1332096610f474011cc0\"\
            ,\n      \"call_id\": \"call_unLAR8MvFNptuiZK6K6HCy5k\",\n      \"name\"\
            : \"get_current_weather\",\n      \"arguments\": \"{\\\"location\\\":\\\
            \"Boston, MA\\\",\\\"unit\\\":\\\"celsius\\\"}\",\n      \"status\": \"\
            completed\"\n    }\n  ],\n  \"parallel_tool_calls\": true,\n  \"previous_response_id\"\
            : null,\n  \"reasoning\": {\n    \"effort\": null,\n    \"summary\": null\n\
            \  },\n  \"store\": true,\n  \"temperature\": 1.0,\n  \"text\": {\n  \
            \  \"format\": {\n      \"type\": \"text\"\n    }\n  },\n  \"tool_choice\"\
            : \"auto\",\n  \"tools\": [\n    {\n      \"type\": \"function\",\n  \
            \    \"description\": \"Get the current weather in a given location\"\
            ,\n      \"name\": \"get_current_weather\",\n      \"parameters\": {\n\
            \        \"type\": \"object\",\n        \"properties\": {\n          \"\
            location\": {\n            \"type\": \"string\",\n            \"description\"\
            : \"The city and state, e.g. San Francisco, CA\"\n          },\n     \
            \     \"unit\": {\n            \"type\": \"string\",\n            \"enum\"\
            : [\n              \"celsius\",\n              \"fahrenheit\"\n      \
            \      ]\n          }\n        },\n        \"required\": [\n         \
            \ \"location\",\n          \"unit\"\n        ]\n      },\n      \"strict\"\
            : true\n    }\n  ],\n  \"top_p\": 1.0,\n  \"truncation\": \"disabled\"\
            ,\n  \"usage\": {\n    \"input_tokens\": 291,\n    \"output_tokens\":\
            \ 23,\n    \"output_tokens_details\": {\n      \"reasoning_tokens\": 0\n\
            \    },\n    \"total_tokens\": 314\n  },\n  \"user\": null,\n  \"metadata\"\
            : {}\n}\n"
        - title: Reasoning
          request:
            curl: "curl https://api.openai.com/v1/responses \\\n  -H \"Content-Type:\
              \ application/json\" \\\n  -H \"Authorization: Bearer $OPENAI_API_KEY\"\
              \ \\\n  -d '{\n    \"model\": \"o3-mini\",\n    \"input\": \"How much\
              \ wood would a woodchuck chuck?\",\n    \"reasoning\": {\n      \"effort\"\
              : \"high\"\n    }\n  }'\n"
            javascript: "import OpenAI from \"openai\";\nconst openai = new OpenAI();\n\
              \nconst response = await openai.responses.create({\n    model: \"o3-mini\"\
              ,\n    input: \"How much wood would a woodchuck chuck?\",\n    reasoning:\
              \ {\n      effort: \"high\"\n    }\n});\n\nconsole.log(response);\n"
            python: "from openai import OpenAI\nclient = OpenAI()\n\nresponse = client.responses.create(\n\
              \    model=\"o3-mini\",\n    input=\"How much wood would a woodchuck\
              \ chuck?\",\n    reasoning={\n        \"effort\": \"high\"\n    }\n\
              )\n\nprint(response)\n"
            csharp: "using System;\nusing OpenAI.Responses;\n\nOpenAIResponseClient\
              \ client = new(\n    model: \"o3-mini\",\n    apiKey: Environment.GetEnvironmentVariable(\"\
              OPENAI_API_KEY\")\n);\n\nstring userInputText = \"How much wood would\
              \ a woodchuck chuck?\";\n\nResponseCreationOptions options = new()\n\
              {\n    ReasoningOptions = new()\n    {\n        ReasoningEffortLevel\
              \ = ResponseReasoningEffortLevel.High,\n    },\n};\n\nOpenAIResponse\
              \ response = client.CreateResponse(userInputText, options);\n\nConsole.WriteLine(response.GetOutputText());\n"
          response: "{\n  \"id\": \"resp_67ccd7eca01881908ff0b5146584e408072912b2993db808\"\
            ,\n  \"object\": \"response\",\n  \"created_at\": 1741477868,\n  \"status\"\
            : \"completed\",\n  \"error\": null,\n  \"incomplete_details\": null,\n\
            \  \"instructions\": null,\n  \"max_output_tokens\": null,\n  \"model\"\
            : \"o1-2024-12-17\",\n  \"output\": [\n    {\n      \"type\": \"message\"\
            ,\n      \"id\": \"msg_67ccd7f7b5848190a6f3e95d809f6b44072912b2993db808\"\
            ,\n      \"status\": \"completed\",\n      \"role\": \"assistant\",\n\
            \      \"content\": [\n        {\n          \"type\": \"output_text\"\
            ,\n          \"text\": \"The classic tongue twister...\",\n          \"\
            annotations\": []\n        }\n      ]\n    }\n  ],\n  \"parallel_tool_calls\"\
            : true,\n  \"previous_response_id\": null,\n  \"reasoning\": {\n    \"\
            effort\": \"high\",\n    \"summary\": null\n  },\n  \"store\": true,\n\
            \  \"temperature\": 1.0,\n  \"text\": {\n    \"format\": {\n      \"type\"\
            : \"text\"\n    }\n  },\n  \"tool_choice\": \"auto\",\n  \"tools\": [],\n\
            \  \"top_p\": 1.0,\n  \"truncation\": \"disabled\",\n  \"usage\": {\n\
            \    \"input_tokens\": 81,\n    \"input_tokens_details\": {\n      \"\
            cached_tokens\": 0\n    },\n    \"output_tokens\": 1035,\n    \"output_tokens_details\"\
            : {\n      \"reasoning_tokens\": 832\n    },\n    \"total_tokens\": 1116\n\
            \  },\n  \"user\": null,\n  \"metadata\": {}\n}\n"
  /responses/{response_id}:
    get:
      operationId: getResponse
      tags:
      - Responses
      summary: 'Retrieves a model response with the given ID.

        '
      parameters:
      - in: path
        name: response_id
        required: true
        schema:
          type: string
          example: resp_677efb5139a88190b512bc3fef8e535d
        description: The ID of the response to retrieve.
      - in: query
        name: include
        schema:
          type: array
          items:
            $ref: '#/components/schemas/Includable'
        description: 'Additional fields to include in the response. See the `include`

          parameter for Response creation above for more information.

          '
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
      x-oaiMeta:
        name: Get a model response
        group: responses
        returns: 'The [Response](/docs/api-reference/responses/object) object matching
          the

          specified ID.

          '
        examples:
          request:
            curl: "curl https://api.openai.com/v1/responses/resp_123 \\\n    -H \"\
              Content-Type: application/json\" \\\n    -H \"Authorization: Bearer\
              \ $OPENAI_API_KEY\"\n"
            javascript: 'import OpenAI from "openai";

              const client = new OpenAI();


              const response = await client.responses.retrieve("resp_123");

              console.log(response);

              '
            python: 'from openai import OpenAI

              client = OpenAI()


              response = client.responses.retrieve("resp_123")

              print(response)

              '
          response: "{\n  \"id\": \"resp_67cb71b351908190a308f3859487620d06981a8637e6bc44\"\
            ,\n  \"object\": \"response\",\n  \"created_at\": 1741386163,\n  \"status\"\
            : \"completed\",\n  \"error\": null,\n  \"incomplete_details\": null,\n\
            \  \"instructions\": null,\n  \"max_output_tokens\": null,\n  \"model\"\
            : \"gpt-4o-2024-08-06\",\n  \"output\": [\n    {\n      \"type\": \"message\"\
            ,\n      \"id\": \"msg_67cb71b3c2b0819084d481baaaf148f206981a8637e6bc44\"\
            ,\n      \"status\": \"completed\",\n      \"role\": \"assistant\",\n\
            \      \"content\": [\n        {\n          \"type\": \"output_text\"\
            ,\n          \"text\": \"Silent circuits hum,  \\nThoughts emerge in data\
            \ streams\u2014  \\nDigital dawn breaks.\",\n          \"annotations\"\
            : []\n        }\n      ]\n    }\n  ],\n  \"parallel_tool_calls\": true,\n\
            \  \"previous_response_id\": null,\n  \"reasoning\": {\n    \"effort\"\
            : null,\n    \"summary\": null\n  },\n  \"store\": true,\n  \"temperature\"\
            : 1.0,\n  \"text\": {\n    \"format\": {\n      \"type\": \"text\"\n \
            \   }\n  },\n  \"tool_choice\": \"auto\",\n  \"tools\": [],\n  \"top_p\"\
            : 1.0,\n  \"truncation\": \"disabled\",\n  \"usage\": {\n    \"input_tokens\"\
            : 32,\n    \"input_tokens_details\": {\n      \"cached_tokens\": 0\n \
            \   },\n    \"output_tokens\": 18,\n    \"output_tokens_details\": {\n\
            \      \"reasoning_tokens\": 0\n    },\n    \"total_tokens\": 50\n  },\n\
            \  \"user\": null,\n  \"metadata\": {}\n}\n"
    delete:
      operationId: deleteResponse
      tags:
      - Responses
      summary: 'Deletes a model response with the given ID.

        '
      parameters:
      - in: path
        name: response_id
        required: true
        schema:
          type: string
          example: resp_677efb5139a88190b512bc3fef8e535d
        description: The ID of the response to delete.
      responses:
        '200':
          description: OK
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-oaiMeta:
        name: Delete a model response
        group: responses
        returns: 'A success message.

          '
        examples:
          request:
            curl: "curl -X DELETE https://api.openai.com/v1/responses/resp_123 \\\n\
              \    -H \"Content-Type: application/json\" \\\n    -H \"Authorization:\
              \ Bearer $OPENAI_API_KEY\"\n"
            javascript: 'import OpenAI from "openai";

              const client = new OpenAI();


              const response = await client.responses.del("resp_123");

              console.log(response);

              '
            python: 'from openai import OpenAI

              client = OpenAI()


              response = client.responses.del("resp_123")

              print(response)

              '
          response: "{\n  \"id\": \"resp_6786a1bec27481909a17d673315b29f6\",\n  \"\
            object\": \"response\",\n  \"deleted\": true\n}\n"
  /responses/{response_id}/input_items:
    get:
      operationId: listInputItems
      tags:
      - Responses
      summary: Returns a list of input items for a given response.
      parameters:
      - in: path
        name: response_id
        required: true
        schema:
          type: string
        description: The ID of the response to retrieve input items for.
      - name: limit
        in: query
        description: 'A limit on the number of objects to be returned. Limit can range
          between

          1 and 100, and the default is 20.

          '
        required: false
        schema:
          type: integer
          default: 20
      - in: query
        name: order
        schema:
          type: string
          enum:
          - asc
          - desc
        description: 'The order to return the input items in. Default is `asc`.

          - `asc`: Return the input items in ascending order.

          - `desc`: Return the input items in descending order.

          '
      - in: query
        name: after
        schema:
          type: string
        description: 'An item ID to list items after, used in pagination.

          '
      - in: query
        name: before
        schema:
          type: string
        description: 'An item ID to list items before, used in pagination.

          '
      - in: query
        name: include
        schema:
          type: array
          items:
            $ref: '#/components/schemas/Includable'
        description: 'Additional fields to include in the response. See the `include`

          parameter for Response creation above for more information.

          '
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseItemList'
      x-oaiMeta:
        name: List input items
        group: responses
        returns: A list of input item objects.
        examples:
          request:
            curl: "curl https://api.openai.com/v1/responses/resp_abc123/input_items\
              \ \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization:\
              \ Bearer $OPENAI_API_KEY\"\n"
            javascript: 'import OpenAI from "openai";

              const client = new OpenAI();


              const response = await client.responses.inputItems.list("resp_123");

              console.log(response.data);

              '
            python: 'from openai import OpenAI

              client = OpenAI()


              response = client.responses.input_items.list("resp_123")

              print(response.data)

              '
          response: "{\n  \"object\": \"list\",\n  \"data\": [\n    {\n      \"id\"\
            : \"msg_abc123\",\n      \"type\": \"message\",\n      \"role\": \"user\"\
            ,\n      \"content\": [\n        {\n          \"type\": \"input_text\"\
            ,\n          \"text\": \"Tell me a three sentence bedtime story about\
            \ a unicorn.\"\n        }\n      ]\n    }\n  ],\n  \"first_id\": \"msg_abc123\"\
            ,\n  \"last_id\": \"msg_abc123\",\n  \"has_more\": false\n}\n"
components:
  schemas:
    TextResponseFormatJsonSchema:
      type: object
      title: JSON schema
      description: 'JSON Schema response format. Used to generate structured JSON
        responses.

        Learn more about [Structured Outputs](/docs/guides/structured-outputs).

        '
      properties:
        type:
          type: string
          description: The type of response format being defined. Always `json_schema`.
          enum:
          - json_schema
          x-stainless-const: true
        description:
          type: string
          description: 'A description of what the response format is for, used by
            the model to

            determine how to respond in the format.

            '
        name:
          type: string
          description: 'The name of the response format. Must be a-z, A-Z, 0-9, or
            contain

            underscores and dashes, with a maximum length of 64.

            '
        schema:
          $ref: '#/components/schemas/ResponseFormatJsonSchemaSchema'
        strict:
          type: boolean
          nullable: true
          default: false
          description: 'Whether to enable strict schema adherence when generating
            the output.

            If set to true, the model will always follow the exact schema defined

            in the `schema` field. Only a subset of JSON Schema is supported when

            `strict` is `true`. To learn more, read the [Structured Outputs

            guide](/docs/guides/structured-outputs).

            '
      required:
      - type
      - schema
      - name
    ResponseCodeInterpreterCallInProgressEvent:
      type: object
      description: Emitted when a code interpreter call is in progress.
      properties:
        type:
          type: string
          description: 'The type of the event. Always `response.code_interpreter_call.in_progress`.

            '
          enum:
          - response.code_interpreter_call.in_progress
          x-stainless-const: true
        output_index:
          type: integer
          description: 'The index of the output item that the code interpreter call
            is in progress.

            '
        code_interpreter_call:
          $ref: '#/components/schemas/CodeInterpreterToolCall'
      required:
      - type
      - response_id
      - output_index
      - code_interpreter_call
      x-oaiMeta:
        name: response.code_interpreter_call.in_progress
        group: responses
        example: "{\n  \"type\": \"response.code_interpreter_call.in.progress\",\n\
          \  \"response_id\": \"resp-123\",\n  \"output_index\": 0,\n  \"code_interpreter_call\"\
          : {}\n}\n"
    Metadata:
      type: object
      description: 'Set of 16 key-value pairs that can be attached to an object. This
        can be

        useful for storing additional information about the object in a structured

        format, and querying for objects via API or the dashboard.


        Keys are strings with a maximum length of 64 characters. Values are strings

        with a maximum length of 512 characters.

        '
      additionalProperties:
        type: string
      x-oaiTypeLabel: map
      nullable: true
    TextResponseFormatConfiguration:
      description: 'An object specifying the format that the model must output.


        Configuring `{ "type": "json_schema" }` enables Structured Outputs,

        which ensures the model will match your supplied JSON schema. Learn more in
        the

        [Structured Outputs guide](/docs/guides/structured-outputs).


        The default format is `{ "type": "text" }` with no additional options.


        **Not recommended for gpt-4o and newer models:**


        Setting to `{ "type": "json_object" }` enables the older JSON mode, which

        ensures the message the model generates is valid JSON. Using `json_schema`

        is preferred for models that support it.

        '
      oneOf:
      - $ref: '#/components/schemas/ResponseFormatText'
      - $ref: '#/components/schemas/TextResponseFormatJsonSchema'
      - $ref: '#/components/schemas/ResponseFormatJsonObject'
    ComputerToolCallOutputResource:
      allOf:
      - $ref: '#/components/schemas/ComputerToolCallOutput'
      - type: object
        properties:
          id:
            type: string
            description: 'The unique ID of the computer call tool output.

              '
        required:
        - id
    ResponseCodeInterpreterCallCodeDeltaEvent:
      type: object
      description: Emitted when a partial code snippet is added by the code interpreter.
      properties:
        type:
          type: string
          description: 'The type of the event. Always `response.code_interpreter_call.code.delta`.

            '
          enum:
          - response.code_interpreter_call.code.delta
          x-stainless-const: true
        output_index:
          type: integer
          description: 'The index of the output item that the code interpreter call
            is in progress.

            '
        delta:
          type: string
          description: 'The partial code snippet added by the code interpreter.

            '
      required:
      - type
      - response_id
      - output_index
      - delta
      x-oaiMeta:
        name: response.code_interpreter_call.code.delta
        group: responses
        example: "{\n  \"type\": \"response.code_interpreter_call.code.delta\",\n\
          \  \"response_id\": \"resp-123\",\n  \"output_index\": 0,\n  \"delta\":\
          \ \"partial code\"\n}\n"
    ResponseCreatedEvent:
      type: object
      description: 'An event that is emitted when a response is created.

        '
      properties:
        type:
          type: string
          description: 'The type of the event. Always `response.created`.

            '
          enum:
          - response.created
          x-stainless-const: true
        response:
          $ref: '#/components/schemas/Response'
          description: 'The response that was created.

            '
      required:
      - type
      - response
      x-oaiMeta:
        name: response.created
        group: responses
        example: "{\n  \"type\": \"response.created\",\n  \"response\": {\n    \"\
          id\": \"resp_67ccfcdd16748190a91872c75d38539e09e4d4aac714747c\",\n    \"\
          object\": \"response\",\n    \"created_at\": 1741487325,\n    \"status\"\
          : \"in_progress\",\n    \"error\": null,\n    \"incomplete_details\": null,\n\
          \    \"instructions\": null,\n    \"max_output_tokens\": null,\n    \"model\"\
          : \"gpt-4o-2024-08-06\",\n    \"output\": [],\n    \"parallel_tool_calls\"\
          : true,\n    \"previous_response_id\": null,\n    \"reasoning\": {\n   \
          \   \"effort\": null,\n      \"summary\": null\n    },\n    \"store\": true,\n\
          \    \"temperature\": 1,\n    \"text\": {\n      \"format\": {\n       \
          \ \"type\": \"text\"\n      }\n    },\n    \"tool_choice\": \"auto\",\n\
          \    \"tools\": [],\n    \"top_p\": 1,\n    \"truncation\": \"disabled\"\
          ,\n    \"usage\": null,\n    \"user\": null,\n    \"metadata\": {}\n  }\n\
          }\n"
    ResponseFormatJsonObject:
      type: object
      title: JSON object
      description: 'JSON object response format. An older method of generating JSON
        responses.

        Using `json_schema` is recommended for models that support it. Note that the

        model will not generate JSON without a system or user message instructing
        it

        to do so.

        '
      properties:
        type:
          type: string
          description: The type of response format being defined. Always `json_object`.
          enum:
          - json_object
          x-stainless-const: true
      required:
      - type
    Coordinate:
      type: object
      title: Coordinate
      description: 'An x/y coordinate pair, e.g. `{ x: 100, y: 200 }`.

        '
      properties:
        x:
          type: integer
          description: 'The x-coordinate.

            '
        y:
          type: integer
          description: 'The y-coordinate.

            '
      required:
      - x
      - y
    ItemReferenceParam:
      properties:
        type:
          anyOf:
          - type: string
            enum:
            - item_reference
            description: The type of item to reference. Always `item_reference`.
            default: item_reference
            x-stainless-const: true
          - type: 'null'
        id:
          type: string
          description: The ID of the item to reference.
      type: object
      required:
      - id
      title: Item reference
      description: An internal identifier for an item to reference.
    ModelIdsResponses:
      example: gpt-4o
      anyOf:
      - $ref: '#/components/schemas/ModelIdsShared'
      - type: string
        title: ResponsesOnlyModel
        enum:
        - o1-pro
        - o1-pro-2025-03-19
        - computer-use-preview
        - computer-use-preview-2025-03-11
    CompoundFilter:
      $recursiveAnchor: true
      type: object
      additionalProperties: false
      title: Compound Filter
      description: Combine multiple filters using `and` or `or`.
      properties:
        type:
          type: string
          description: 'Type of operation: `and` or `or`.'
          enum:
          - and
          - or
        filters:
          type: array
          description: Array of filters to combine. Items can be `ComparisonFilter`
            or `CompoundFilter`.
          items:
            oneOf:
            - $ref: '#/components/schemas/ComparisonFilter'
            - $recursiveRef: '#'
      required:
      - type
      - filters
      x-oaiMeta:
        name: CompoundFilter
    ResponseErrorEvent:
      type: object
      description: Emitted when an error occurs.
      properties:
        type:
          type: string
          description: 'The type of the event. Always `error`.

            '
          enum:
          - error
          x-stainless-const: true
        code:
          type: string
          description: 'The error code.

            '
          nullable: true
        message:
          type: string
          description: 'The error message.

            '
        param:
          type: string
          description: 'The error parameter.

            '
          nullable: true
      required:
      - type
      - code
      - message
      - param
      x-oaiMeta:
        name: error
        group: responses
        example: "{\n  \"type\": \"error\",\n  \"code\": \"ERR_SOMETHING\",\n  \"\
          message\": \"Something went wrong\",\n  \"param\": null\n}\n"
    FileSearchToolCall:
      type: object
      title: File search tool call
      description: 'The results of a file search tool call. See the

        [file search guide](/docs/guides/tools-file-search) for more information.

        '
      properties:
        id:
          type: string
          description: 'The unique ID of the file search tool call.

            '
        type:
          type: string
          enum:
          - file_search_call
          description: 'The type of the file search tool call. Always `file_search_call`.

            '
          x-stainless-const: true
        status:
          type: string
          description: 'The status of the file search tool call. One of `in_progress`,

            `searching`, `incomplete` or `failed`,

            '
          enum:
          - in_progress
          - searching
          - completed
          - incomplete
          - failed
        queries:
          type: array
          items:
            type: string
          description: 'The queries used to search for files.

            '
        results:
          type: array
          description: 'The results of the file search tool call.

            '
          items:
            type: object
            properties:
              file_id:
                type: string
                description: 'The unique ID of the file.

                  '
              text:
                type: string
                description: 'The text that was retrieved from the file.

                  '
              filename:
                type: string
                description: 'The name of the file.

                  '
              attributes:
                $ref: '#/components/schemas/VectorStoreFileAttributes'
              score:
                type: number
                format: float
                description: 'The relevance score of the file - a value between 0
                  and 1.

                  '
          nullable: true
      required:
      - id
      - type
      - status
      - queries
    Response:
      allOf:
      - $ref: '#/components/schemas/ModelResponseProperties'
      - $ref: '#/components/schemas/ResponseProperties'
      - type: object
        properties:
          id:
            type: string
            description: 'Unique identifier for this Response.

              '
          object:
            type: string
            description: 'The object type of this resource - always set to `response`.

              '
            enum:
            - response
            x-stainless-const: true
          status:
            type: string
            description: 'The status of the response generation. One of `completed`,
              `failed`,

              `in_progress`, or `incomplete`.

              '
            enum:
            - completed
            - failed
            - in_progress
            - incomplete
          created_at:
            type: number
            description: 'Unix timestamp (in seconds) of when this Response was created.

              '
          error:
            $ref: '#/components/schemas/ResponseError'
          incomplete_details:
            type: object
            nullable: true
            description: 'Details about why the response is incomplete.

              '
            properties:
              reason:
                type: string
                description: The reason why the response is incomplete.
                enum:
                - max_output_tokens
                - content_filter
          output:
            type: array
            description: "An array of content items generated by the model.\n\n- The\
              \ length and order of items in the `output` array is dependent\n  on\
              \ the model's response.\n- Rather than accessing the first item in the\
              \ `output` array and\n  assuming it's an `assistant` message with the\
              \ content generated by\n  the model, you might consider using the `output_text`\
              \ property where\n  supported in SDKs.\n"
            items:
              $ref: '#/components/schemas/OutputItem'
          output_text:
            type: string
            nullable: true
            description: 'SDK-only convenience property that contains the aggregated
              text output

              from all `output_text` items in the `output` array, if any are present.

              Supported in the Python and JavaScript SDKs.

              '
            x-oaiSupportedSDKs:
            - python
            - javascript
          usage:
            $ref: '#/components/schemas/ResponseUsage'
          parallel_tool_calls:
            type: boolean
            description: 'Whether to allow the model to run tool calls in parallel.

              '
            default: true
        required:
        - id
        - object
        - created_at
        - error
        - incomplete_details
        - instructions
        - model
        - tools
        - output
        - parallel_tool_calls
        - metadata
        - tool_choice
        - temperature
        - top_p
        x-oaiMeta:
          name: The response object
          group: responses
          example: "{\n  \"id\": \"resp_67ccd3a9da748190baa7f1570fe91ac604becb25c45c1d41\"\
            ,\n  \"object\": \"response\",\n  \"created_at\": 1741476777,\n  \"status\"\
            : \"completed\",\n  \"error\": null,\n  \"incomplete_details\": null,\n\
            \  \"instructions\": null,\n  \"max_output_tokens\": null,\n  \"model\"\
            : \"gpt-4o-2024-08-06\",\n  \"output\": [\n    {\n      \"type\": \"message\"\
            ,\n      \"id\": \"msg_67ccd3acc8d48190a77525dc6de64b4104becb25c45c1d41\"\
            ,\n      \"status\": \"completed\",\n      \"role\": \"assistant\",\n\
            \      \"content\": [\n        {\n          \"type\": \"output_text\"\
            ,\n          \"text\": \"The image depicts a scenic landscape with a wooden\
            \ boardwalk or pathway leading through lush, green grass under a blue\
            \ sky with some clouds. The setting suggests a peaceful natural area,\
            \ possibly a park or nature reserve. There are trees and shrubs in the\
            \ background.\",\n          \"annotations\": []\n        }\n      ]\n\
            \    }\n  ],\n  \"parallel_tool_calls\": true,\n  \"previous_response_id\"\
            : null,\n  \"reasoning\": {\n    \"effort\": null,\n    \"summary\": null\n\
            \  },\n  \"store\": true,\n  \"temperature\": 1.0,\n  \"text\": {\n  \
            \  \"format\": {\n      \"type\": \"text\"\n    }\n  },\n  \"tool_choice\"\
            : \"auto\",\n  \"tools\": [],\n  \"top_p\": 1.0,\n  \"truncation\": \"\
            disabled\",\n  \"usage\": {\n    \"input_tokens\": 328,\n    \"input_tokens_details\"\
            : {\n      \"cached_tokens\": 0\n    },\n    \"output_tokens\": 52,\n\
            \    \"output_tokens_details\": {\n      \"reasoning_tokens\": 0\n   \
            \ },\n    \"total_tokens\": 380\n  },\n  \"user\": null,\n  \"metadata\"\
            : {}\n}\n"
    ResponseIncompleteEvent:
      type: object
      description: 'An event that is emitted when a response finishes as incomplete.

        '
      properties:
        type:
          type: string
          description: 'The type of the event. Always `response.incomplete`.

            '
          enum:
          - response.incomplete
          x-stainless-const: true
        response:
          $ref: '#/components/schemas/Response'
          description: 'The response that was incomplete.

            '
      required:
      - type
      - response
      x-oaiMeta:
        name: response.incomplete
        group: responses
        example: "{\n  \"type\": \"response.incomplete\",\n  \"response\": {\n   \
          \ \"id\": \"resp_123\",\n    \"object\": \"response\",\n    \"created_at\"\
          : 1740855869,\n    \"status\": \"incomplete\",\n    \"error\": null,\n \
          \   \"incomplete_details\": {\n      \"reason\": \"max_tokens\"\n    },\n\
          \    \"instructions\": null,\n    \"max_output_tokens\": null,\n    \"model\"\
          : \"gpt-4o-mini-2024-07-18\",\n    \"output\": [],\n    \"previous_response_id\"\
          : null,\n    \"reasoning_effort\": null,\n    \"store\": false,\n    \"\
          temperature\": 1,\n    \"text\": {\n      \"format\": {\n        \"type\"\
          : \"text\"\n      }\n    },\n    \"tool_choice\": \"auto\",\n    \"tools\"\
          : [],\n    \"top_p\": 1,\n    \"truncation\": \"disabled\",\n    \"usage\"\
          : null,\n    \"user\": null,\n    \"metadata\": {}\n  }\n}\n"
    ComputerToolCallOutput:
      type: object
      title: Computer tool call output
      description: 'The output of a computer tool call.

        '
      properties:
        type:
          type: string
          description: 'The type of the computer tool call output. Always `computer_call_output`.

            '
          enum:
          - computer_call_output
          default: computer_call_output
          x-stainless-const: true
        id:
          type: string
          description: 'The ID of the computer tool call output.

            '
        call_id:
          type: string
          description: 'The ID of the computer tool call that produced the output.

            '
        acknowledged_safety_checks:
          type: array
          description: 'The safety checks reported by the API that have been acknowledged
            by the

            developer.

            '
          items:
            $ref: '#/components/schemas/ComputerToolCallSafetyCheck'
        output:
          $ref: '#/components/schemas/ComputerScreenshotImage'
        status:
          type: string
          description: 'The status of the message input. One of `in_progress`, `completed`,
            or

            `incomplete`. Populated when input items are returned via API.

            '
          enum:
          - in_progress
          - completed
          - incomplete
      required:
      - type
      - call_id
      - output
    InputMessage:
      type: object
      title: Input message
      description: 'A message input to the model with a role indicating instruction
        following

        hierarchy. Instructions given with the `developer` or `system` role take

        precedence over instructions given with the `user` role.

        '
      properties:
        type:
          type: string
          description: 'The type of the message input. Always set to `message`.

            '
          enum:
          - message
          x-stainless-const: true
        role:
          type: string
          description: 'The role of the message input. One of `user`, `system`, or
            `developer`.

            '
          enum:
          - user
          - system
          - developer
        status:
          type: string
          description: 'The status of item. One of `in_progress`, `completed`, or

            `incomplete`. Populated when items are returned via API.

            '
          enum:
          - in_progress
          - completed
          - incomplete
        content:
          $ref: '#/components/schemas/InputMessageContentList'
      required:
      - role
      - content
    Annotation:
      oneOf:
      - $ref: '#/components/schemas/FileCitationBody'
      - $ref: '#/components/schemas/UrlCitationBody'
      - $ref: '#/components/schemas/FilePath'
      discriminator:
        propertyName: type
    Type:
      type: object
      title: Type
      description: 'An action to type in text.

        '
      properties:
        type:
          type: string
          enum:
          - type
          default: type
          description: 'Specifies the event type. For a type action, this property
            is

            always set to `type`.

            '
          x-stainless-const: true
        text:
          type: string
          description: 'The text to type.

            '
      required:
      - type
      - text
    ResponseErrorCode:
      type: string
      description: 'The error code for the response.

        '
      enum:
      - server_error
      - rate_limit_exceeded
      - invalid_prompt
      - vector_store_timeout
      - invalid_image
      - invalid_image_format
      - invalid_base64_image
      - invalid_image_url
      - image_too_large
      - image_too_small
      - image_parse_error
      - image_content_policy_violation
      - invalid_image_mode
      - image_file_too_large
      - unsupported_image_media_type
      - empty_image_file
      - failed_to_download_image
      - image_file_not_found
    Click:
      type: object
      title: Click
      description: 'A click action.

        '
      properties:
        type:
          type: string
          enum:
          - click
          default: click
          description: 'Specifies the event type. For a click action, this property
            is

            always set to `click`.

            '
          x-stainless-const: true
        button:
          type: string
          enum:
          - left
          - right
          - wheel
          - back
          - forward
          description: 'Indicates which mouse button was pressed during the click.
            One of `left`, `right`, `wheel`, `back`, or `forward`.

            '
        x:
          type: integer
          description: 'The x-coordinate where the click occurred.

            '
        y:
          type: integer
          description: 'The y-coordinate where the click occurred.

            '
      required:
      - type
      - button
      - x
      - y
    InputTextContent:
      properties:
        type:
          type: string
          enum:
          - input_text
          description: The type of the input item. Always `input_text`.
          default: input_text
          x-stainless-const: true
        text:
          type: string
          description: The text input to the model.
      type: object
      required:
      - type
      - text
      title: Input text
      description: A text input to the model.
    ResponseItemList:
      type: object
      description: A list of Response items.
      properties:
        object:
          type: string
          description: The type of object returned, must be `list`.
          enum:
          - list
          x-stainless-const: true
        data:
          type: array
          description: A list of items used to generate this response.
          items:
            $ref: '#/components/schemas/ItemResource'
        has_more:
          type: boolean
          description: Whether there are more items available.
        first_id:
          type: string
          description: The ID of the first item in the list.
        last_id:
          type: string
          description: The ID of the last item in the list.
      required:
      - object
      - data
      - has_more
      - first_id
      - last_id
      x-oaiMeta:
        name: The input item list
        group: responses
        example: "{\n  \"object\": \"list\",\n  \"data\": [\n    {\n      \"id\":\
          \ \"msg_abc123\",\n      \"type\": \"message\",\n      \"role\": \"user\"\
          ,\n      \"content\": [\n        {\n          \"type\": \"input_text\",\n\
          \          \"text\": \"Tell me a three sentence bedtime story about a unicorn.\"\
          \n        }\n      ]\n    }\n  ],\n  \"first_id\": \"msg_abc123\",\n  \"\
          last_id\": \"msg_abc123\",\n  \"has_more\": false\n}\n"
    OutputTextContent:
      properties:
        type:
          type: string
          enum:
          - output_text
          description: The type of the output text. Always `output_text`.
          default: output_text
          x-stainless-const: true
        text:
          type: string
          description: The text output from the model.
        annotations:
          items:
            $ref: '#/components/schemas/Annotation'
          type: array
          description: The annotations of the text output.
      type: object
      required:
      - type
      - text
      - annotations
      title: Output text
      description: A text output from the model.
    ReasoningEffort:
      type: string
      enum:
      - low
      - medium
      - high
      default: medium
      nullable: true
      description: '**o-series models only**


        Constrains effort on reasoning for

        [reasoning models](https://platform.openai.com/docs/guides/reasoning).

        Currently supported values are `low`, `medium`, and `high`. Reducing

        reasoning effort can result in faster responses and fewer tokens used

        on reasoning in a response.

        '
    ApproximateLocation:
      properties:
        type:
          type: string
          enum:
          - approximate
          description: The type of location approximation. Always `approximate`.
          default: approximate
          x-stainless-const: true
        country:
          anyOf:
          - type: string
            description: The two-letter [ISO country code](https://en.wikipedia.org/wiki/ISO_3166-1)
              of the user, e.g. `US`.
          - type: 'null'
        region:
          anyOf:
          - type: string
            description: Free text input for the region of the user, e.g. `California`.
          - type: 'null'
        city:
          anyOf:
          - type: string
            description: Free text input for the city of the user, e.g. `San Francisco`.
          - type: 'null'
        timezone:
          anyOf:
          - type: string
            description: The [IANA timezone](https://timeapi.io/documentation/iana-timezones)
              of the user, e.g. `America/Los_Angeles`.
          - type: 'null'
      type: object
      required: &id001
      - type
    ReasoningItem:
      type: object
      description: 'A description of the chain of thought used by a reasoning model
        while generating

        a response.

        '
      title: Reasoning
      properties:
        type:
          type: string
          description: 'The type of the object. Always `reasoning`.

            '
          enum:
          - reasoning
          x-stainless-const: true
        id:
          type: string
          description: 'The unique identifier of the reasoning content.

            '
        summary:
          type: array
          description: 'Reasoning text contents.

            '
          items:
            type: object
            properties:
              type:
                type: string
                description: 'The type of the object. Always `summary_text`.

                  '
                enum:
                - summary_text
                x-stainless-const: true
              text:
                type: string
                description: 'A short summary of the reasoning used by the model when
                  generating

                  the response.

                  '
            required:
            - type
            - text
        status:
          type: string
          description: 'The status of the item. One of `in_progress`, `completed`,
            or

            `incomplete`. Populated when items are returned via API.

            '
          enum:
          - in_progress
          - completed
          - incomplete
      required:
      - id
      - summary
      - type
    ComputerToolCallSafetyCheck:
      type: object
      description: 'A pending safety check for the computer call.

        '
      properties:
        id:
          type: string
          description: The ID of the pending safety check.
        code:
          type: string
          description: The type of the pending safety check.
        message:
          type: string
          description: Details about the pending safety check.
      required:
      - id
      - code
      - message
    WebSearchToolCall:
      type: object
      title: Web search tool call
      description: 'The results of a web search tool call. See the

        [web search guide](/docs/guides/tools-web-search) for more information.

        '
      properties:
        id:
          type: string
          description: 'The unique ID of the web search tool call.

            '
        type:
          type: string
          enum:
          - web_search_call
          description: 'The type of the web search tool call. Always `web_search_call`.

            '
          x-stainless-const: true
        status:
          type: string
          description: 'The status of the web search tool call.

            '
          enum:
          - in_progress
          - searching
          - completed
          - failed
      required:
      - id
      - type
      - status
    VectorStoreFileAttributes:
      type: object
      description: 'Set of 16 key-value pairs that can be attached to an object. This
        can be

        useful for storing additional information about the object in a structured

        format, and querying for objects via API or the dashboard. Keys are strings

        with a maximum length of 64 characters. Values are strings with a maximum

        length of 512 characters, booleans, or numbers.

        '
      maxProperties: 16
      propertyNames:
        type: string
        maxLength: 64
      additionalProperties:
        oneOf:
        - type: string
          maxLength: 512
        - type: number
        - type: boolean
      x-oaiTypeLabel: map
      nullable: true
    FunctionToolCallOutput:
      type: object
      title: Function tool call output
      description: 'The output of a function tool call.

        '
      properties:
        id:
          type: string
          description: 'The unique ID of the function tool call output. Populated
            when this item

            is returned via API.

            '
        type:
          type: string
          enum:
          - function_call_output
          description: 'The type of the function tool call output. Always `function_call_output`.

            '
          x-stainless-const: true
        call_id:
          type: string
          description: 'The unique ID of the function tool call generated by the model.

            '
        output:
          type: string
          description: 'A JSON string of the output of the function tool call.

            '
        status:
          type: string
          description: 'The status of the item. One of `in_progress`, `completed`,
            or

            `incomplete`. Populated when items are returned via API.

            '
          enum:
          - in_progress
          - completed
          - incomplete
      required:
      - type
      - call_id
      - output
    Item:
      type: object
      description: 'Content item used to generate a response.

        '
      oneOf:
      - $ref: '#/components/schemas/InputMessage'
      - $ref: '#/components/schemas/OutputMessage'
      - $ref: '#/components/schemas/FileSearchToolCall'
      - $ref: '#/components/schemas/ComputerToolCall'
      - $ref: '#/components/schemas/ComputerCallOutputItemParam'
      - $ref: '#/components/schemas/WebSearchToolCall'
      - $ref: '#/components/schemas/FunctionToolCall'
      - $ref: '#/components/schemas/FunctionCallOutputItemParam'
      - $ref: '#/components/schemas/ReasoningItem'
      discriminator:
        propertyName: type
    ResponseFailedEvent:
      type: object
      description: 'An event that is emitted when a response fails.

        '
      properties:
        type:
          type: string
          description: 'The type of the event. Always `response.failed`.

            '
          enum:
          - response.failed
          x-stainless-const: true
        response:
          $ref: '#/components/schemas/Response'
          description: 'The response that failed.

            '
      required:
      - type
      - response
      x-oaiMeta:
        name: response.failed
        group: responses
        example: "{\n  \"type\": \"response.failed\",\n  \"response\": {\n    \"id\"\
          : \"resp_123\",\n    \"object\": \"response\",\n    \"created_at\": 1740855869,\n\
          \    \"status\": \"failed\",\n    \"error\": {\n      \"code\": \"server_error\"\
          ,\n      \"message\": \"The model failed to generate a response.\"\n   \
          \ },\n    \"incomplete_details\": null,\n    \"instructions\": null,\n \
          \   \"max_output_tokens\": null,\n    \"model\": \"gpt-4o-mini-2024-07-18\"\
          ,\n    \"output\": [],\n    \"previous_response_id\": null,\n    \"reasoning_effort\"\
          : null,\n    \"store\": false,\n    \"temperature\": 1,\n    \"text\": {\n\
          \      \"format\": {\n        \"type\": \"text\"\n      }\n    },\n    \"\
          tool_choice\": \"auto\",\n    \"tools\": [],\n    \"top_p\": 1,\n    \"\
          truncation\": \"disabled\",\n    \"usage\": null,\n    \"user\": null,\n\
          \    \"metadata\": {}\n  }\n}\n"
    ResponseTextDeltaEvent:
      type: object
      description: Emitted when there is an additional text delta.
      properties:
        type:
          type: string
          description: 'The type of the event. Always `response.output_text.delta`.

            '
          enum:
          - response.output_text.delta
          x-stainless-const: true
        item_id:
          type: string
          description: 'The ID of the output item that the text delta was added to.

            '
        output_index:
          type: integer
          description: 'The index of the output item that the text delta was added
            to.

            '
        content_index:
          type: integer
          description: 'The index of the content part that the text delta was added
            to.

            '
        delta:
          type: string
          description: 'The text delta that was added.

            '
      required:
      - type
      - item_id
      - output_index
      - content_index
      - delta
      x-oaiMeta:
        name: response.output_text.delta
        group: responses
        example: "{\n  \"type\": \"response.output_text.delta\",\n  \"item_id\": \"\
          msg_123\",\n  \"output_index\": 0,\n  \"content_index\": 0,\n  \"delta\"\
          : \"In\"\n}\n"
    ToolChoiceTypes:
      type: object
      title: Hosted tool
      description: 'Indicates that the model should use a built-in tool to generate
        a response.

        [Learn more about built-in tools](/docs/guides/tools).

        '
      properties:
        type:
          type: string
          description: 'The type of hosted tool the model should to use. Learn more
            about

            [built-in tools](/docs/guides/tools).


            Allowed values are:

            - `file_search`

            - `web_search_preview`

            - `computer_use_preview`

            '
          enum:
          - file_search
          - web_search_preview
          - computer_use_preview
          - web_search_preview_2025_03_11
      required:
      - type
    InputItem:
      oneOf:
      - $ref: '#/components/schemas/EasyInputMessage'
      - type: object
        title: Item
        description: 'An item representing part of the context for the response to
          be

          generated by the model. Can contain text, images, and audio inputs,

          as well as previous assistant responses and tool call outputs.

          '
        $ref: '#/components/schemas/Item'
      - $ref: '#/components/schemas/ItemReferenceParam'
      discriminator:
        propertyName: type
    ResponseTextAnnotationDeltaEvent:
      type: object
      description: Emitted when a text annotation is added.
      properties:
        type:
          type: string
          description: 'The type of the event. Always `response.output_text.annotation.added`.

            '
          enum:
          - response.output_text.annotation.added
          x-stainless-const: true
        item_id:
          type: string
          description: 'The ID of the output item that the text annotation was added
            to.

            '
        output_index:
          type: integer
          description: 'The index of the output item that the text annotation was
            added to.

            '
        content_index:
          type: integer
          description: 'The index of the content part that the text annotation was
            added to.

            '
        annotation_index:
          type: integer
          description: 'The index of the annotation that was added.

            '
        annotation:
          $ref: '#/components/schemas/Annotation'
      required:
      - type
      - item_id
      - output_index
      - content_index
      - annotation_index
      - annotation
      x-oaiMeta:
        name: response.output_text.annotation.added
        group: responses
        example: "{\n  \"type\": \"response.output_text.annotation.added\",\n  \"\
          item_id\": \"msg_abc123\",\n  \"output_index\": 1,\n  \"content_index\"\
          : 0,\n  \"annotation_index\": 0,\n  \"annotation\": {\n    \"type\": \"\
          file_citation\",\n    \"index\": 390,\n    \"file_id\": \"file-4wDz5b167pAf72nx1h9eiN\"\
          ,\n    \"filename\": \"dragons.pdf\"\n  }\n}\n"
    Reasoning:
      type: object
      description: '**o-series models only**


        Configuration options for

        [reasoning models](https://platform.openai.com/docs/guides/reasoning).

        '
      title: Reasoning
      properties:
        effort:
          $ref: '#/components/schemas/ReasoningEffort'
        summary:
          type: string
          description: 'A summary of the reasoning performed by the model. This can
            be

            useful for debugging and understanding the model''s reasoning process.

            One of `auto`, `concise`, or `detailed`.

            '
          enum:
          - auto
          - concise
          - detailed
          nullable: true
        generate_summary:
          type: string
          deprecated: true
          description: '**Deprecated:** use `summary` instead.


            A summary of the reasoning performed by the model. This can be

            useful for debugging and understanding the model''s reasoning process.

            One of `auto`, `concise`, or `detailed`.

            '
          enum:
          - auto
          - concise
          - detailed
          nullable: true
    ResponseReasoningSummaryPartAddedEvent:
      type: object
      description: Emitted when a new reasoning summary part is added.
      properties:
        type:
          type: string
          description: 'The type of the event. Always `response.reasoning_summary_part.added`.

            '
          enum:
          - response.reasoning_summary_part.added
          x-stainless-const: true
        item_id:
          type: string
          description: 'The ID of the item this summary part is associated with.

            '
        output_index:
          type: integer
          description: 'The index of the output item this summary part is associated
            with.

            '
        summary_index:
          type: integer
          description: 'The index of the summary part within the reasoning summary.

            '
        part:
          type: object
          description: 'The summary part that was added.

            '
          properties:
            type:
              type: string
              description: The type of the summary part. Always `summary_text`.
              enum:
              - summary_text
              x-stainless-const: true
            text:
              type: string
              description: The text of the summary part.
          required:
          - type
          - text
      required:
      - type
      - item_id
      - output_index
      - summary_index
      - part
      x-oaiMeta:
        name: response.reasoning_summary_part.added
        group: responses
        example: "{\n  \"type\": \"response.reasoning_summary_part.added\",\n  \"\
          item_id\": \"rs_6806bfca0b2481918a5748308061a2600d3ce51bdffd5476\",\n  \"\
          output_index\": 0,\n  \"summary_index\": 0,\n  \"part\": {\n    \"type\"\
          : \"summary_text\",\n    \"text\": \"\"\n  }\n}\n"
    CodeInterpreterFileOutput:
      type: object
      title: Code interpreter file output
      description: 'The output of a code interpreter tool call that is a file.

        '
      properties:
        type:
          type: string
          enum:
          - files
          description: 'The type of the code interpreter file output. Always `files`.

            '
          x-stainless-const: true
        files:
          type: array
          items:
            type: object
            properties:
              mime_type:
                type: string
                description: 'The MIME type of the file.

                  '
              file_id:
                type: string
                description: 'The ID of the file.

                  '
            required:
            - mime_type
            - file_id
      required:
      - type
      - files
    ResponseCodeInterpreterCallCodeDoneEvent:
      type: object
      description: Emitted when code snippet output is finalized by the code interpreter.
      properties:
        type:
          type: string
          description: 'The type of the event. Always `response.code_interpreter_call.code.done`.

            '
          enum:
          - response.code_interpreter_call.code.done
          x-stainless-const: true
        output_index:
          type: integer
          description: 'The index of the output item that the code interpreter call
            is in progress.

            '
        code:
          type: string
          description: 'The final code snippet output by the code interpreter.

            '
      required:
      - type
      - response_id
      - output_index
      - code
      x-oaiMeta:
        name: response.code_interpreter_call.code.done
        group: responses
        example: "{\n  \"type\": \"response.code_interpreter_call.code.done\",\n \
          \ \"response_id\": \"resp-123\",\n  \"output_index\": 3,\n  \"code\": \"\
          console.log('done');\"\n}\n"
    ComputerCallOutputItemParam:
      properties:
        id:
          anyOf:
          - type: string
            description: The ID of the computer tool call output.
          - type: 'null'
        call_id:
          type: string
          maxLength: 64
          minLength: 1
          description: The ID of the computer tool call that produced the output.
        type:
          type: string
          enum:
          - computer_call_output
          description: The type of the computer tool call output. Always `computer_call_output`.
          default: computer_call_output
          x-stainless-const: true
        output:
          $ref: '#/components/schemas/ComputerScreenshotImage'
        acknowledged_safety_checks:
          anyOf:
          - items:
              $ref: '#/components/schemas/ComputerCallSafetyCheckParam'
            type: array
            description: The safety checks reported by the API that have been acknowledged
              by the developer.
          - type: 'null'
        status:
          anyOf:
          - type: string
            enum:
            - in_progress
            - completed
            - incomplete
            description: The status of the message input. One of `in_progress`, `completed`,
              or `incomplete`. Populated when input items are returned via API.
          - type: 'null'
      type: object
      required:
      - call_id
      - type
      - output
      title: Computer tool call output
      description: The output of a computer tool call.
    ResponseReasoningSummaryTextDoneEvent:
      type: object
      description: Emitted when a reasoning summary text is completed.
      properties:
        type:
          type: string
          description: 'The type of the event. Always `response.reasoning_summary_text.done`.

            '
          enum:
          - response.reasoning_summary_text.done
          x-stainless-const: true
        item_id:
          type: string
          description: 'The ID of the item this summary text is associated with.

            '
        output_index:
          type: integer
          description: 'The index of the output item this summary text is associated
            with.

            '
        summary_index:
          type: integer
          description: 'The index of the summary part within the reasoning summary.

            '
        text:
          type: string
          description: 'The full text of the completed reasoning summary.

            '
      required:
      - type
      - item_id
      - output_index
      - summary_index
      - text
      x-oaiMeta:
        name: response.reasoning_summary_text.done
        group: responses
        example: "{\n  \"type\": \"response.reasoning_summary_text.done\",\n  \"item_id\"\
          : \"rs_6806bfca0b2481918a5748308061a2600d3ce51bdffd5476\",\n  \"output_index\"\
          : 0,\n  \"summary_index\": 0,\n  \"text\": \"**Responding to a greeting**\\\
          n\\nThe user just said, \\\"Hello!\\\" So, it seems I need to engage. I'll\
          \ greet them back and offer help since they're looking to chat. I could\
          \ say something like, \\\"Hello! How can I assist you today?\\\" That feels\
          \ friendly and open. They didn't ask a specific question, so this approach\
          \ will work well for starting a conversation. Let's see where it goes from\
          \ there!\"\n}\n"
    Screenshot:
      type: object
      title: Screenshot
      description: 'A screenshot action.

        '
      properties:
        type:
          type: string
          enum:
          - screenshot
          default: screenshot
          description: 'Specifies the event type. For a screenshot action, this property
            is

            always set to `screenshot`.

            '
          x-stainless-const: true
      required:
      - type
    ModelResponseProperties:
      type: object
      properties:
        metadata:
          $ref: '#/components/schemas/Metadata'
        temperature:
          type: number
          minimum: 0
          maximum: 2
          default: 1
          example: 1
          nullable: true
          description: 'What sampling temperature to use, between 0 and 2. Higher
            values like 0.8 will make the output more random, while lower values like
            0.2 will make it more focused and deterministic.

            We generally recommend altering this or `top_p` but not both.

            '
        top_p:
          type: number
          minimum: 0
          maximum: 1
          default: 1
          example: 1
          nullable: true
          description: 'An alternative to sampling with temperature, called nucleus
            sampling,

            where the model considers the results of the tokens with top_p probability

            mass. So 0.1 means only the tokens comprising the top 10% probability
            mass

            are considered.


            We generally recommend altering this or `temperature` but not both.

            '
        user:
          type: string
          example: user-1234
          description: 'A unique identifier representing your end-user, which can
            help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices#end-user-ids).

            '
        service_tier:
          $ref: '#/components/schemas/ServiceTier'
    CodeInterpreterTextOutput:
      type: object
      title: Code interpreter text output
      description: 'The output of a code interpreter tool call that is text.

        '
      properties:
        type:
          type: string
          enum:
          - logs
          description: 'The type of the code interpreter text output. Always `logs`.

            '
          x-stainless-const: true
        logs:
          type: string
          description: 'The logs of the code interpreter tool call.

            '
      required:
      - type
      - logs
    RefusalContent:
      properties:
        type:
          type: string
          enum:
          - refusal
          description: The type of the refusal. Always `refusal`.
          default: refusal
          x-stainless-const: true
        refusal:
          type: string
          description: The refusal explanationfrom the model.
      type: object
      required:
      - type
      - refusal
      title: Refusal
      description: A refusal from the model.
    FileSearchTool:
      properties:
        type:
          type: string
          enum:
          - file_search
          description: The type of the file search tool. Always `file_search`.
          default: file_search
          x-stainless-const: true
        vector_store_ids:
          items:
            type: string
          type: array
          description: The IDs of the vector stores to search.
        max_num_results:
          type: integer
          description: The maximum number of results to return. This number should
            be between 1 and 50 inclusive.
        ranking_options:
          $ref: '#/components/schemas/RankingOptions'
          description: Ranking options for search.
        filters:
          anyOf:
          - $ref: '#/components/schemas/Filters'
            description: A filter to apply.
          - type: 'null'
      type: object
      required:
      - type
      - vector_store_ids
      title: File search
      description: A tool that searches for relevant content from uploaded files.
        Learn more about the [file search tool](https://platform.openai.com/docs/guides/tools-file-search).
    FunctionCallOutputItemParam:
      properties:
        id:
          anyOf:
          - type: string
            description: The unique ID of the function tool call output. Populated
              when this item is returned via API.
          - type: 'null'
        call_id:
          type: string
          maxLength: 64
          minLength: 1
          description: The unique ID of the function tool call generated by the model.
        type:
          type: string
          enum:
          - function_call_output
          description: The type of the function tool call output. Always `function_call_output`.
          default: function_call_output
          x-stainless-const: true
        output:
          type: string
          maxLength: 10485760
          description: A JSON string of the output of the function tool call.
        status:
          anyOf:
          - type: string
            enum:
            - in_progress
            - completed
            - incomplete
            description: The status of the item. One of `in_progress`, `completed`,
              or `incomplete`. Populated when items are returned via API.
          - type: 'null'
      type: object
      required:
      - call_id
      - type
      - output
      title: Function tool call output
      description: The output of a function tool call.
    Wait:
      type: object
      title: Wait
      description: 'A wait action.

        '
      properties:
        type:
          type: string
          enum:
          - wait
          default: wait
          description: 'Specifies the event type. For a wait action, this property
            is

            always set to `wait`.

            '
          x-stainless-const: true
      required:
      - type
    ResponseReasoningSummaryPartDoneEvent:
      type: object
      description: Emitted when a reasoning summary part is completed.
      properties:
        type:
          type: string
          description: 'The type of the event. Always `response.reasoning_summary_part.done`.

            '
          enum:
          - response.reasoning_summary_part.done
          x-stainless-const: true
        item_id:
          type: string
          description: 'The ID of the item this summary part is associated with.

            '
        output_index:
          type: integer
          description: 'The index of the output item this summary part is associated
            with.

            '
        summary_index:
          type: integer
          description: 'The index of the summary part within the reasoning summary.

            '
        part:
          type: object
          description: 'The completed summary part.

            '
          properties:
            type:
              type: string
              description: The type of the summary part. Always `summary_text`.
              enum:
              - summary_text
              x-stainless-const: true
            text:
              type: string
              description: The text of the summary part.
          required:
          - type
          - text
      required:
      - type
      - item_id
      - output_index
      - summary_index
      - part
      x-oaiMeta:
        name: response.reasoning_summary_part.done
        group: responses
        example: "{\n  \"type\": \"response.reasoning_summary_part.done\",\n  \"item_id\"\
          : \"rs_6806bfca0b2481918a5748308061a2600d3ce51bdffd5476\",\n  \"output_index\"\
          : 0,\n  \"summary_index\": 0,\n  \"part\": {\n    \"type\": \"summary_text\"\
          ,\n    \"text\": \"**Responding to a greeting**\\n\\nThe user just said,\
          \ \\\"Hello!\\\" So, it seems I need to engage. I'll greet them back and\
          \ offer help since they're looking to chat. I could say something like,\
          \ \\\"Hello! How can I assist you today?\\\" That feels friendly and open.\
          \ They didn't ask a specific question, so this approach will work well for\
          \ starting a conversation. Let's see where it goes from there!\"\n  }\n\
          }\n"
    Drag:
      type: object
      title: Drag
      description: 'A drag action.

        '
      properties:
        type:
          type: string
          enum:
          - drag
          default: drag
          description: 'Specifies the event type. For a drag action, this property
            is

            always set to `drag`.

            '
          x-stainless-const: true
        path:
          type: array
          description: "An array of coordinates representing the path of the drag\
            \ action. Coordinates will appear as an array\nof objects, eg\n```\n[\n\
            \  { x: 100, y: 200 },\n  { x: 200, y: 300 }\n]\n```\n"
          items:
            title: Drag path coordinates
            description: 'A series of x/y coordinate pairs in the drag path.

              '
            $ref: '#/components/schemas/Coordinate'
      required:
      - type
      - path
    ResponseCodeInterpreterCallCompletedEvent:
      type: object
      description: Emitted when the code interpreter call is completed.
      properties:
        type:
          type: string
          description: 'The type of the event. Always `response.code_interpreter_call.completed`.

            '
          enum:
          - response.code_interpreter_call.completed
          x-stainless-const: true
        output_index:
          type: integer
          description: 'The index of the output item that the code interpreter call
            is in progress.

            '
        code_interpreter_call:
          $ref: '#/components/schemas/CodeInterpreterToolCall'
      required:
      - type
      - response_id
      - output_index
      - code_interpreter_call
      x-oaiMeta:
        name: response.code_interpreter_call.completed
        group: responses
        example: "{\n  \"type\": \"response.code_interpreter_call.completed\",\n \
          \ \"response_id\": \"resp-123\",\n  \"output_index\": 5,\n  \"code_interpreter_call\"\
          : {}\n}\n"
    ResponseReasoningSummaryTextDeltaEvent:
      type: object
      description: Emitted when a delta is added to a reasoning summary text.
      properties:
        type:
          type: string
          description: 'The type of the event. Always `response.reasoning_summary_text.delta`.

            '
          enum:
          - response.reasoning_summary_text.delta
          x-stainless-const: true
        item_id:
          type: string
          description: 'The ID of the item this summary text delta is associated with.

            '
        output_index:
          type: integer
          description: 'The index of the output item this summary text delta is associated
            with.

            '
        summary_index:
          type: integer
          description: 'The index of the summary part within the reasoning summary.

            '
        delta:
          type: string
          description: 'The text delta that was added to the summary.

            '
      required:
      - type
      - item_id
      - output_index
      - summary_index
      - delta
      x-oaiMeta:
        name: response.reasoning_summary_text.delta
        group: responses
        example: "{\n  \"type\": \"response.reasoning_summary_text.delta\",\n  \"\
          item_id\": \"rs_6806bfca0b2481918a5748308061a2600d3ce51bdffd5476\",\n  \"\
          output_index\": 0,\n  \"summary_index\": 0,\n  \"delta\": \"**Respond\"\n\
          }\n"
    Tool:
      oneOf:
      - $ref: '#/components/schemas/FileSearchTool'
      - $ref: '#/components/schemas/FunctionTool'
      - $ref: '#/components/schemas/WebSearchPreviewTool'
      - $ref: '#/components/schemas/ComputerUsePreviewTool'
      discriminator:
        propertyName: type
    ResponseAudioDeltaEvent:
      type: object
      description: Emitted when there is a partial audio response.
      properties:
        type:
          type: string
          description: 'The type of the event. Always `response.audio.delta`.

            '
          enum:
          - response.audio.delta
          x-stainless-const: true
        delta:
          type: string
          description: 'A chunk of Base64 encoded response audio bytes.

            '
      required:
      - type
      - delta
      x-oaiMeta:
        name: response.audio.delta
        group: responses
        example: "{\n  \"type\": \"response.audio.delta\",\n  \"response_id\": \"\
          resp_123\",\n  \"delta\": \"base64encoded...\"\n}\n"
    ResponseOutputItemAddedEvent:
      type: object
      description: Emitted when a new output item is added.
      properties:
        type:
          type: string
          description: 'The type of the event. Always `response.output_item.added`.

            '
          enum:
          - response.output_item.added
          x-stainless-const: true
        output_index:
          type: integer
          description: 'The index of the output item that was added.

            '
        item:
          $ref: '#/components/schemas/OutputItem'
          description: 'The output item that was added.

            '
      required:
      - type
      - output_index
      - item
      x-oaiMeta:
        name: response.output_item.added
        group: responses
        example: "{\n  \"type\": \"response.output_item.added\",\n  \"output_index\"\
          : 0,\n  \"item\": {\n    \"id\": \"msg_123\",\n    \"status\": \"in_progress\"\
          ,\n    \"type\": \"message\",\n    \"role\": \"assistant\",\n    \"content\"\
          : []\n  }\n}\n"
    Move:
      type: object
      title: Move
      description: 'A mouse move action.

        '
      properties:
        type:
          type: string
          enum:
          - move
          default: move
          description: 'Specifies the event type. For a move action, this property
            is

            always set to `move`.

            '
          x-stainless-const: true
        x:
          type: integer
          description: 'The x-coordinate to move to.

            '
        y:
          type: integer
          description: 'The y-coordinate to move to.

            '
      required:
      - type
      - x
      - y
    ResponseFunctionCallArgumentsDoneEvent:
      type: object
      description: Emitted when function-call arguments are finalized.
      properties:
        type:
          type: string
          enum:
          - response.function_call_arguments.done
          x-stainless-const: true
        item_id:
          type: string
          description: The ID of the item.
        output_index:
          type: integer
          description: The index of the output item.
        arguments:
          type: string
          description: The function-call arguments.
      required:
      - type
      - item_id
      - output_index
      - arguments
      x-oaiMeta:
        name: response.function_call_arguments.done
        group: responses
        example: "{\n  \"type\": \"response.function_call_arguments.done\",\n  \"\
          item_id\": \"item-abc\",\n  \"output_index\": 1,\n  \"arguments\": \"{ \\\
          \"arg\\\": 123 }\"\n}\n"
    OutputItem:
      anyOf:
      - $ref: '#/components/schemas/OutputMessage'
      - $ref: '#/components/schemas/FileSearchToolCall'
      - $ref: '#/components/schemas/FunctionToolCall'
      - $ref: '#/components/schemas/WebSearchToolCall'
      - $ref: '#/components/schemas/ComputerToolCall'
      - $ref: '#/components/schemas/ReasoningItem'
      discriminator:
        propertyName: type
    FileCitationBody:
      properties:
        type:
          type: string
          enum:
          - file_citation
          description: The type of the file citation. Always `file_citation`.
          default: file_citation
          x-stainless-const: true
        file_id:
          type: string
          description: The ID of the file.
        index:
          type: integer
          description: The index of the file in the list of files.
      type: object
      required:
      - type
      - file_id
      - index
      title: File citation
      description: A citation to a file.
    CodeInterpreterToolOutput:
      oneOf:
      - $ref: '#/components/schemas/CodeInterpreterTextOutput'
      - $ref: '#/components/schemas/CodeInterpreterFileOutput'
    CodeInterpreterToolCall:
      type: object
      title: Code interpreter tool call
      description: 'A tool call to run code.

        '
      properties:
        id:
          type: string
          description: 'The unique ID of the code interpreter tool call.

            '
        type:
          type: string
          enum:
          - code_interpreter_call
          description: 'The type of the code interpreter tool call. Always `code_interpreter_call`.

            '
          x-stainless-const: true
        code:
          type: string
          description: 'The code to run.

            '
        status:
          type: string
          enum:
          - in_progress
          - interpreting
          - completed
          description: 'The status of the code interpreter tool call.

            '
        results:
          type: array
          items:
            $ref: '#/components/schemas/CodeInterpreterToolOutput'
          description: 'The results of the code interpreter tool call.

            '
      required:
      - id
      - type
      - code
      - status
      - results
    ResponseFormatText:
      type: object
      title: Text
      description: 'Default response format. Used to generate text responses.

        '
      properties:
        type:
          type: string
          description: The type of response format being defined. Always `text`.
          enum:
          - text
          x-stainless-const: true
      required:
      - type
    ResponseCompletedEvent:
      type: object
      description: Emitted when the model response is complete.
      properties:
        type:
          type: string
          description: 'The type of the event. Always `response.completed`.

            '
          enum:
          - response.completed
          x-stainless-const: true
        response:
          $ref: '#/components/schemas/Response'
          description: 'Properties of the completed response.

            '
      required:
      - type
      - response
      x-oaiMeta:
        name: response.completed
        group: responses
        example: "{\n  \"type\": \"response.completed\",\n  \"response\": {\n    \"\
          id\": \"resp_123\",\n    \"object\": \"response\",\n    \"created_at\":\
          \ 1740855869,\n    \"status\": \"completed\",\n    \"error\": null,\n  \
          \  \"incomplete_details\": null,\n    \"input\": [],\n    \"instructions\"\
          : null,\n    \"max_output_tokens\": null,\n    \"model\": \"gpt-4o-mini-2024-07-18\"\
          ,\n    \"output\": [\n      {\n        \"id\": \"msg_123\",\n        \"\
          type\": \"message\",\n        \"role\": \"assistant\",\n        \"content\"\
          : [\n          {\n            \"type\": \"output_text\",\n            \"\
          text\": \"In a shimmering forest under a sky full of stars, a lonely unicorn\
          \ named Lila discovered a hidden pond that glowed with moonlight. Every\
          \ night, she would leave sparkling, magical flowers by the water's edge,\
          \ hoping to share her beauty with others. One enchanting evening, she woke\
          \ to find a group of friendly animals gathered around, eager to be friends\
          \ and share in her magic.\",\n            \"annotations\": []\n        \
          \  }\n        ]\n      }\n    ],\n    \"previous_response_id\": null,\n\
          \    \"reasoning_effort\": null,\n    \"store\": false,\n    \"temperature\"\
          : 1,\n    \"text\": {\n      \"format\": {\n        \"type\": \"text\"\n\
          \      }\n    },\n    \"tool_choice\": \"auto\",\n    \"tools\": [],\n \
          \   \"top_p\": 1,\n    \"truncation\": \"disabled\",\n    \"usage\": {\n\
          \      \"input_tokens\": 0,\n      \"output_tokens\": 0,\n      \"output_tokens_details\"\
          : {\n        \"reasoning_tokens\": 0\n      },\n      \"total_tokens\":\
          \ 0\n    },\n    \"user\": null,\n    \"metadata\": {}\n  }\n}\n"
    UrlCitationBody:
      properties:
        type:
          type: string
          enum:
          - url_citation
          description: The type of the URL citation. Always `url_citation`.
          default: url_citation
          x-stainless-const: true
        url:
          type: string
          description: The URL of the web resource.
        start_index:
          type: integer
          description: The index of the first character of the URL citation in the
            message.
        end_index:
          type: integer
          description: The index of the last character of the URL citation in the
            message.
        title:
          type: string
          description: The title of the web resource.
      type: object
      required:
      - type
      - url
      - start_index
      - end_index
      - title
      title: URL citation
      description: A citation for a web resource used to generate a model response.
    OutputMessage:
      type: object
      title: Output message
      description: 'An output message from the model.

        '
      properties:
        id:
          type: string
          description: 'The unique ID of the output message.

            '
        type:
          type: string
          description: 'The type of the output message. Always `message`.

            '
          enum:
          - message
          x-stainless-const: true
        role:
          type: string
          description: 'The role of the output message. Always `assistant`.

            '
          enum:
          - assistant
          x-stainless-const: true
        content:
          type: array
          description: 'The content of the output message.

            '
          items:
            $ref: '#/components/schemas/OutputContent'
        status:
          type: string
          description: 'The status of the message input. One of `in_progress`, `completed`,
            or

            `incomplete`. Populated when input items are returned via API.

            '
          enum:
          - in_progress
          - completed
          - incomplete
      required:
      - id
      - type
      - role
      - content
      - status
    KeyPress:
      type: object
      title: KeyPress
      description: 'A collection of keypresses the model would like to perform.

        '
      properties:
        type:
          type: string
          enum:
          - keypress
          default: keypress
          description: 'Specifies the event type. For a keypress action, this property
            is

            always set to `keypress`.

            '
          x-stainless-const: true
        keys:
          type: array
          items:
            type: string
            description: 'One of the keys the model is requesting to be pressed.

              '
          description: 'The combination of keys the model is requesting to be pressed.
            This is an

            array of strings, each representing a key.

            '
      required:
      - type
      - keys
    ResponseWebSearchCallSearchingEvent:
      type: object
      description: Emitted when a web search call is executing.
      properties:
        type:
          type: string
          description: 'The type of the event. Always `response.web_search_call.searching`.

            '
          enum:
          - response.web_search_call.searching
          x-stainless-const: true
        output_index:
          type: integer
          description: 'The index of the output item that the web search call is associated
            with.

            '
        item_id:
          type: string
          description: 'Unique ID for the output item associated with the web search
            call.

            '
      required:
      - type
      - output_index
      - item_id
      x-oaiMeta:
        name: response.web_search_call.searching
        group: responses
        example: "{\n  \"type\": \"response.web_search_call.searching\",\n  \"output_index\"\
          : 0,\n  \"item_id\": \"ws_123\",\n}\n"
    ResponseRefusalDoneEvent:
      type: object
      description: Emitted when refusal text is finalized.
      properties:
        type:
          type: string
          description: 'The type of the event. Always `response.refusal.done`.

            '
          enum:
          - response.refusal.done
          x-stainless-const: true
        item_id:
          type: string
          description: 'The ID of the output item that the refusal text is finalized.

            '
        output_index:
          type: integer
          description: 'The index of the output item that the refusal text is finalized.

            '
        content_index:
          type: integer
          description: 'The index of the content part that the refusal text is finalized.

            '
        refusal:
          type: string
          description: 'The refusal text that is finalized.

            '
      required:
      - type
      - item_id
      - output_index
      - content_index
      - refusal
      x-oaiMeta:
        name: response.refusal.done
        group: responses
        example: "{\n  \"type\": \"response.refusal.done\",\n  \"item_id\": \"item-abc\"\
          ,\n  \"output_index\": 1,\n  \"content_index\": 2,\n  \"refusal\": \"final\
          \ refusal text\"\n}\n"
    InputFileContent:
      properties:
        type:
          type: string
          enum:
          - input_file
          description: The type of the input item. Always `input_file`.
          default: input_file
          x-stainless-const: true
        file_id:
          anyOf:
          - type: string
            description: The ID of the file to be sent to the model.
          - type: 'null'
        filename:
          type: string
          description: The name of the file to be sent to the model.
        file_data:
          type: string
          description: 'The content of the file to be sent to the model.

            '
      type: object
      required: *id001
      title: Input file
      description: A file input to the model.
    ComparisonFilter:
      type: object
      additionalProperties: false
      title: Comparison Filter
      description: 'A filter used to compare a specified attribute key to a given
        value using a defined comparison operation.

        '
      properties:
        type:
          type: string
          default: eq
          enum:
          - eq
          - ne
          - gt
          - gte
          - lt
          - lte
          description: 'Specifies the comparison operator: `eq`, `ne`, `gt`, `gte`,
            `lt`, `lte`.

            - `eq`: equals

            - `ne`: not equal

            - `gt`: greater than

            - `gte`: greater than or equal

            - `lt`: less than

            - `lte`: less than or equal

            '
        key:
          type: string
          description: The key to compare against the value.
        value:
          oneOf:
          - type: string
          - type: number
          - type: boolean
          description: The value to compare against the attribute key; supports string,
            number, or boolean types.
      required:
      - type
      - key
      - value
      x-oaiMeta:
        name: ComparisonFilter
    ServiceTier:
      type: string
      description: "Specifies the latency tier to use for processing the request.\
        \ This parameter is relevant for customers subscribed to the scale tier service:\n\
        \  - If set to 'auto', and the Project is Scale tier enabled, the system\n\
        \    will utilize scale tier credits until they are exhausted.\n  - If set\
        \ to 'auto', and the Project is not Scale tier enabled, the request will be\
        \ processed using the default service tier with a lower uptime SLA and no\
        \ latency guarentee.\n  - If set to 'default', the request will be processed\
        \ using the default service tier with a lower uptime SLA and no latency guarentee.\n\
        \  - If set to 'flex', the request will be processed with the Flex Processing\
        \ service tier. [Learn more](/docs/guides/flex-processing).\n  - When not\
        \ set, the default behavior is 'auto'.\n\n  When this parameter is set, the\
        \ response body will include the `service_tier` utilized.\n"
      enum:
      - auto
      - default
      - flex
      nullable: true
      default: auto
    OutputContent:
      oneOf:
      - $ref: '#/components/schemas/OutputTextContent'
      - $ref: '#/components/schemas/RefusalContent'
    InputImageContent:
      properties:
        type:
          type: string
          enum:
          - input_image
          description: The type of the input item. Always `input_image`.
          default: input_image
          x-stainless-const: true
        image_url:
          anyOf:
          - type: string
            description: The URL of the image to be sent to the model. A fully qualified
              URL or base64 encoded image in a data URL.
          - type: 'null'
        file_id:
          anyOf:
          - type: string
            description: The ID of the file to be sent to the model.
          - type: 'null'
        detail:
          type: string
          enum:
          - low
          - high
          - auto
          description: The detail level of the image to be sent to the model. One
            of `high`, `low`, or `auto`. Defaults to `auto`.
      type: object
      required:
      - type
      - detail
      title: Input image
      description: An image input to the model. Learn about [image inputs](/docs/guides/vision).
    ResponseFileSearchCallInProgressEvent:
      type: object
      description: Emitted when a file search call is initiated.
      properties:
        type:
          type: string
          description: 'The type of the event. Always `response.file_search_call.in_progress`.

            '
          enum:
          - response.file_search_call.in_progress
          x-stainless-const: true
        output_index:
          type: integer
          description: 'The index of the output item that the file search call is
            initiated.

            '
        item_id:
          type: string
          description: 'The ID of the output item that the file search call is initiated.

            '
      required:
      - type
      - output_index
      - item_id
      x-oaiMeta:
        name: response.file_search_call.in_progress
        group: responses
        example: "{\n  \"type\": \"response.file_search_call.in_progress\",\n  \"\
          output_index\": 0,\n  \"item_id\": \"fs_123\",\n}\n"
    Filters:
      anyOf:
      - $ref: '#/components/schemas/ComparisonFilter'
      - $ref: '#/components/schemas/CompoundFilter'
    RankingOptions:
      properties:
        ranker:
          type: string
          enum:
          - auto
          - default-2024-11-15
          description: The ranker to use for the file search.
        score_threshold:
          type: number
          description: The score threshold for the file search, a number between 0
            and 1. Numbers closer to 1 will attempt to return only the most relevant
            results, but may return fewer results.
      type: object
      required: []
    CreateResponse:
      allOf:
      - $ref: '#/components/schemas/CreateModelResponseProperties'
      - $ref: '#/components/schemas/ResponseProperties'
      - type: object
        properties:
          input:
            description: 'Text, image, or file inputs to the model, used to generate
              a response.


              Learn more:

              - [Text inputs and outputs](/docs/guides/text)

              - [Image inputs](/docs/guides/images)

              - [File inputs](/docs/guides/pdf-files)

              - [Conversation state](/docs/guides/conversation-state)

              - [Function calling](/docs/guides/function-calling)

              '
            oneOf:
            - type: string
              title: Text input
              description: 'A text input to the model, equivalent to a text input
                with the

                `user` role.

                '
            - type: array
              title: Input item list
              description: 'A list of one or many input items to the model, containing

                different content types.

                '
              items:
                $ref: '#/components/schemas/InputItem'
          include:
            type: array
            description: "Specify additional output data to include in the model response.\
              \ Currently\nsupported values are:\n- `file_search_call.results`: Include\
              \ the search results of\n  the file search tool call.\n- `message.input_image.image_url`:\
              \ Include image urls from the input message.\n- `computer_call_output.output.image_url`:\
              \ Include image urls from the computer call output.\n"
            items:
              $ref: '#/components/schemas/Includable'
            nullable: true
          parallel_tool_calls:
            type: boolean
            description: 'Whether to allow the model to run tool calls in parallel.

              '
            default: true
            nullable: true
          store:
            type: boolean
            description: 'Whether to store the generated model response for later
              retrieval via

              API.

              '
            default: true
            nullable: true
          stream:
            description: 'If set to true, the model response data will be streamed
              to the client

              as it is generated using [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format).

              See the [Streaming section below](/docs/api-reference/responses-streaming)

              for more information.

              '
            type: boolean
            nullable: true
            default: false
        required:
        - model
        - input
    ResponseContentPartDoneEvent:
      type: object
      description: Emitted when a content part is done.
      properties:
        type:
          type: string
          description: 'The type of the event. Always `response.content_part.done`.

            '
          enum:
          - response.content_part.done
          x-stainless-const: true
        item_id:
          type: string
          description: 'The ID of the output item that the content part was added
            to.

            '
        output_index:
          type: integer
          description: 'The index of the output item that the content part was added
            to.

            '
        content_index:
          type: integer
          description: 'The index of the content part that is done.

            '
        part:
          $ref: '#/components/schemas/OutputContent'
          description: 'The content part that is done.

            '
      required:
      - type
      - item_id
      - output_index
      - content_index
      - part
      x-oaiMeta:
        name: response.content_part.done
        group: responses
        example: "{\n  \"type\": \"response.content_part.done\",\n  \"item_id\": \"\
          msg_123\",\n  \"output_index\": 0,\n  \"content_index\": 0,\n  \"part\"\
          : {\n    \"type\": \"output_text\",\n    \"text\": \"In a shimmering forest\
          \ under a sky full of stars, a lonely unicorn named Lila discovered a hidden\
          \ pond that glowed with moonlight. Every night, she would leave sparkling,\
          \ magical flowers by the water's edge, hoping to share her beauty with others.\
          \ One enchanting evening, she woke to find a group of friendly animals gathered\
          \ around, eager to be friends and share in her magic.\",\n    \"annotations\"\
          : []\n  }\n}\n"
    ResponseWebSearchCallCompletedEvent:
      type: object
      description: Emitted when a web search call is completed.
      properties:
        type:
          type: string
          description: 'The type of the event. Always `response.web_search_call.completed`.

            '
          enum:
          - response.web_search_call.completed
          x-stainless-const: true
        output_index:
          type: integer
          description: 'The index of the output item that the web search call is associated
            with.

            '
        item_id:
          type: string
          description: 'Unique ID for the output item associated with the web search
            call.

            '
      required:
      - type
      - output_index
      - item_id
      x-oaiMeta:
        name: response.web_search_call.completed
        group: responses
        example: "{\n  \"type\": \"response.web_search_call.completed\",\n  \"output_index\"\
          : 0,\n  \"item_id\": \"ws_123\",\n}\n"
    InputMessageResource:
      allOf:
      - $ref: '#/components/schemas/InputMessage'
      - type: object
        properties:
          id:
            type: string
            description: 'The unique ID of the message input.

              '
        required:
        - id
    ResponseWebSearchCallInProgressEvent:
      type: object
      description: Emitted when a web search call is initiated.
      properties:
        type:
          type: string
          description: 'The type of the event. Always `response.web_search_call.in_progress`.

            '
          enum:
          - response.web_search_call.in_progress
          x-stainless-const: true
        output_index:
          type: integer
          description: 'The index of the output item that the web search call is associated
            with.

            '
        item_id:
          type: string
          description: 'Unique ID for the output item associated with the web search
            call.

            '
      required:
      - type
      - output_index
      - item_id
      x-oaiMeta:
        name: response.web_search_call.in_progress
        group: responses
        example: "{\n  \"type\": \"response.web_search_call.in_progress\",\n  \"output_index\"\
          : 0,\n  \"item_id\": \"ws_123\",\n}\n"
    ComputerCallSafetyCheckParam:
      properties:
        id:
          type: string
          description: The ID of the pending safety check.
        code:
          anyOf:
          - type: string
            description: The type of the pending safety check.
          - type: 'null'
        message:
          anyOf:
          - type: string
            description: Details about the pending safety check.
          - type: 'null'
      type: object
      required:
      - id
      description: A pending safety check for the computer call.
    ResponseAudioDoneEvent:
      type: object
      description: Emitted when the audio response is complete.
      properties:
        type:
          type: string
          description: 'The type of the event. Always `response.audio.done`.

            '
          enum:
          - response.audio.done
          x-stainless-const: true
      required:
      - type
      - response_id
      x-oaiMeta:
        name: response.audio.done
        group: responses
        example: "{\n  \"type\": \"response.audio.done\",\n  \"response_id\": \"resp-123\"\
          \n}\n"
    InputContent:
      oneOf:
      - $ref: '#/components/schemas/InputTextContent'
      - $ref: '#/components/schemas/InputImageContent'
      - $ref: '#/components/schemas/InputFileContent'
    ResponseStreamEvent:
      anyOf:
      - $ref: '#/components/schemas/ResponseAudioDeltaEvent'
      - $ref: '#/components/schemas/ResponseAudioDoneEvent'
      - $ref: '#/components/schemas/ResponseAudioTranscriptDeltaEvent'
      - $ref: '#/components/schemas/ResponseAudioTranscriptDoneEvent'
      - $ref: '#/components/schemas/ResponseCodeInterpreterCallCodeDeltaEvent'
      - $ref: '#/components/schemas/ResponseCodeInterpreterCallCodeDoneEvent'
      - $ref: '#/components/schemas/ResponseCodeInterpreterCallCompletedEvent'
      - $ref: '#/components/schemas/ResponseCodeInterpreterCallInProgressEvent'
      - $ref: '#/components/schemas/ResponseCodeInterpreterCallInterpretingEvent'
      - $ref: '#/components/schemas/ResponseCompletedEvent'
      - $ref: '#/components/schemas/ResponseContentPartAddedEvent'
      - $ref: '#/components/schemas/ResponseContentPartDoneEvent'
      - $ref: '#/components/schemas/ResponseCreatedEvent'
      - $ref: '#/components/schemas/ResponseErrorEvent'
      - $ref: '#/components/schemas/ResponseFileSearchCallCompletedEvent'
      - $ref: '#/components/schemas/ResponseFileSearchCallInProgressEvent'
      - $ref: '#/components/schemas/ResponseFileSearchCallSearchingEvent'
      - $ref: '#/components/schemas/ResponseFunctionCallArgumentsDeltaEvent'
      - $ref: '#/components/schemas/ResponseFunctionCallArgumentsDoneEvent'
      - $ref: '#/components/schemas/ResponseInProgressEvent'
      - $ref: '#/components/schemas/ResponseFailedEvent'
      - $ref: '#/components/schemas/ResponseIncompleteEvent'
      - $ref: '#/components/schemas/ResponseOutputItemAddedEvent'
      - $ref: '#/components/schemas/ResponseOutputItemDoneEvent'
      - $ref: '#/components/schemas/ResponseReasoningSummaryPartAddedEvent'
      - $ref: '#/components/schemas/ResponseReasoningSummaryPartDoneEvent'
      - $ref: '#/components/schemas/ResponseReasoningSummaryTextDeltaEvent'
      - $ref: '#/components/schemas/ResponseReasoningSummaryTextDoneEvent'
      - $ref: '#/components/schemas/ResponseRefusalDeltaEvent'
      - $ref: '#/components/schemas/ResponseRefusalDoneEvent'
      - $ref: '#/components/schemas/ResponseTextAnnotationDeltaEvent'
      - $ref: '#/components/schemas/ResponseTextDeltaEvent'
      - $ref: '#/components/schemas/ResponseTextDoneEvent'
      - $ref: '#/components/schemas/ResponseWebSearchCallCompletedEvent'
      - $ref: '#/components/schemas/ResponseWebSearchCallInProgressEvent'
      - $ref: '#/components/schemas/ResponseWebSearchCallSearchingEvent'
      discriminator:
        propertyName: type
    FunctionToolCallResource:
      allOf:
      - $ref: '#/components/schemas/FunctionToolCall'
      - type: object
        properties:
          id:
            type: string
            description: 'The unique ID of the function tool call.

              '
        required:
        - id
    ResponseError:
      type: object
      description: 'An error object returned when the model fails to generate a Response.

        '
      nullable: true
      properties:
        code:
          $ref: '#/components/schemas/ResponseErrorCode'
        message:
          type: string
          description: 'A human-readable description of the error.

            '
      required:
      - code
      - message
    ToolChoiceFunction:
      type: object
      title: Function tool
      description: 'Use this option to force the model to call a specific function.

        '
      properties:
        type:
          type: string
          enum:
          - function
          description: For function calling, the type is always `function`.
          x-stainless-const: true
        name:
          type: string
          description: The name of the function to call.
      required:
      - type
      - name
    ResponseFileSearchCallSearchingEvent:
      type: object
      description: Emitted when a file search is currently searching.
      properties:
        type:
          type: string
          description: 'The type of the event. Always `response.file_search_call.searching`.

            '
          enum:
          - response.file_search_call.searching
          x-stainless-const: true
        output_index:
          type: integer
          description: 'The index of the output item that the file search call is
            searching.

            '
        item_id:
          type: string
          description: 'The ID of the output item that the file search call is initiated.

            '
      required:
      - type
      - output_index
      - item_id
      x-oaiMeta:
        name: response.file_search_call.searching
        group: responses
        example: "{\n  \"type\": \"response.file_search_call.searching\",\n  \"output_index\"\
          : 0,\n  \"item_id\": \"fs_123\",\n}\n"
    Includable:
      type: string
      description: "Specify additional output data to include in the model response.\
        \ Currently\nsupported values are:\n- `file_search_call.results`: Include\
        \ the search results of\n  the file search tool call.\n- `message.input_image.image_url`:\
        \ Include image urls from the input message.\n- `computer_call_output.output.image_url`:\
        \ Include image urls from the computer call output.\n"
      enum:
      - file_search_call.results
      - message.input_image.image_url
      - computer_call_output.output.image_url
    ResponseFormatJsonSchemaSchema:
      type: object
      title: JSON schema
      description: 'The schema for the response format, described as a JSON Schema
        object.

        Learn how to build JSON schemas [here](https://json-schema.org/).

        '
      additionalProperties: true
    ResponseFunctionCallArgumentsDeltaEvent:
      type: object
      description: Emitted when there is a partial function-call arguments delta.
      properties:
        type:
          type: string
          description: 'The type of the event. Always `response.function_call_arguments.delta`.

            '
          enum:
          - response.function_call_arguments.delta
          x-stainless-const: true
        item_id:
          type: string
          description: 'The ID of the output item that the function-call arguments
            delta is added to.

            '
        output_index:
          type: integer
          description: 'The index of the output item that the function-call arguments
            delta is added to.

            '
        delta:
          type: string
          description: 'The function-call arguments delta that is added.

            '
      required:
      - type
      - item_id
      - output_index
      - delta
      x-oaiMeta:
        name: response.function_call_arguments.delta
        group: responses
        example: "{\n  \"type\": \"response.function_call_arguments.delta\",\n  \"\
          item_id\": \"item-abc\",\n  \"output_index\": 0,\n  \"delta\": \"{ \\\"\
          arg\\\":\"\n}\n"
    FunctionToolCallOutputResource:
      allOf:
      - $ref: '#/components/schemas/FunctionToolCallOutput'
      - type: object
        properties:
          id:
            type: string
            description: 'The unique ID of the function call tool output.

              '
        required:
        - id
    Error:
      type: object
      properties:
        code:
          type: string
          nullable: true
        message:
          type: string
          nullable: false
        param:
          type: string
          nullable: true
        type:
          type: string
          nullable: false
      required:
      - type
      - message
      - param
      - code
    ComputerAction:
      oneOf:
      - $ref: '#/components/schemas/Click'
      - $ref: '#/components/schemas/DoubleClick'
      - $ref: '#/components/schemas/Drag'
      - $ref: '#/components/schemas/KeyPress'
      - $ref: '#/components/schemas/Move'
      - $ref: '#/components/schemas/Screenshot'
      - $ref: '#/components/schemas/Scroll'
      - $ref: '#/components/schemas/Type'
      - $ref: '#/components/schemas/Wait'
    ResponseFileSearchCallCompletedEvent:
      type: object
      description: Emitted when a file search call is completed (results found).
      properties:
        type:
          type: string
          description: 'The type of the event. Always `response.file_search_call.completed`.

            '
          enum:
          - response.file_search_call.completed
          x-stainless-const: true
        output_index:
          type: integer
          description: 'The index of the output item that the file search call is
            initiated.

            '
        item_id:
          type: string
          description: 'The ID of the output item that the file search call is initiated.

            '
      required:
      - type
      - output_index
      - item_id
      x-oaiMeta:
        name: response.file_search_call.completed
        group: responses
        example: "{\n  \"type\": \"response.file_search_call.completed\",\n  \"output_index\"\
          : 0,\n  \"item_id\": \"fs_123\",\n}\n"
    ResponseOutputItemDoneEvent:
      type: object
      description: Emitted when an output item is marked done.
      properties:
        type:
          type: string
          description: 'The type of the event. Always `response.output_item.done`.

            '
          enum:
          - response.output_item.done
          x-stainless-const: true
        output_index:
          type: integer
          description: 'The index of the output item that was marked done.

            '
        item:
          $ref: '#/components/schemas/OutputItem'
          description: 'The output item that was marked done.

            '
      required:
      - type
      - output_index
      - item
      x-oaiMeta:
        name: response.output_item.done
        group: responses
        example: "{\n  \"type\": \"response.output_item.done\",\n  \"output_index\"\
          : 0,\n  \"item\": {\n    \"id\": \"msg_123\",\n    \"status\": \"completed\"\
          ,\n    \"type\": \"message\",\n    \"role\": \"assistant\",\n    \"content\"\
          : [\n      {\n        \"type\": \"output_text\",\n        \"text\": \"In\
          \ a shimmering forest under a sky full of stars, a lonely unicorn named\
          \ Lila discovered a hidden pond that glowed with moonlight. Every night,\
          \ she would leave sparkling, magical flowers by the water's edge, hoping\
          \ to share her beauty with others. One enchanting evening, she woke to find\
          \ a group of friendly animals gathered around, eager to be friends and share\
          \ in her magic.\",\n        \"annotations\": []\n      }\n    ]\n  }\n}\n"
    ComputerUsePreviewTool:
      properties:
        type:
          type: string
          enum:
          - computer_use_preview
          description: The type of the computer use tool. Always `computer_use_preview`.
          default: computer_use_preview
          x-stainless-const: true
        environment:
          type: string
          enum:
          - windows
          - mac
          - linux
          - ubuntu
          - browser
          description: The type of computer environment to control.
        display_width:
          type: integer
          description: The width of the computer display.
        display_height:
          type: integer
          description: The height of the computer display.
      type: object
      required:
      - type
      - environment
      - display_width
      - display_height
      title: Computer use preview
      description: A tool that controls a virtual computer. Learn more about the [computer
        tool](https://platform.openai.com/docs/guides/tools-computer-use).
    ComputerScreenshotImage:
      type: object
      description: 'A computer screenshot image used with the computer use tool.

        '
      properties:
        type:
          type: string
          enum:
          - computer_screenshot
          default: computer_screenshot
          description: 'Specifies the event type. For a computer screenshot, this
            property is

            always set to `computer_screenshot`.

            '
          x-stainless-const: true
        image_url:
          type: string
          description: The URL of the screenshot image.
        file_id:
          type: string
          description: The identifier of an uploaded file that contains the screenshot.
      required:
      - type
    ResponseAudioTranscriptDoneEvent:
      type: object
      description: Emitted when the full audio transcript is completed.
      properties:
        type:
          type: string
          description: 'The type of the event. Always `response.audio.transcript.done`.

            '
          enum:
          - response.audio.transcript.done
          x-stainless-const: true
      required:
      - type
      - response_id
      x-oaiMeta:
        name: response.audio.transcript.done
        group: responses
        example: "{\n  \"type\": \"response.audio.transcript.done\",\n  \"response_id\"\
          : \"resp_123\"\n}\n"
    ResponseContentPartAddedEvent:
      type: object
      description: Emitted when a new content part is added.
      properties:
        type:
          type: string
          description: 'The type of the event. Always `response.content_part.added`.

            '
          enum:
          - response.content_part.added
          x-stainless-const: true
        item_id:
          type: string
          description: 'The ID of the output item that the content part was added
            to.

            '
        output_index:
          type: integer
          description: 'The index of the output item that the content part was added
            to.

            '
        content_index:
          type: integer
          description: 'The index of the content part that was added.

            '
        part:
          $ref: '#/components/schemas/OutputContent'
          description: 'The content part that was added.

            '
      required:
      - type
      - item_id
      - output_index
      - content_index
      - part
      x-oaiMeta:
        name: response.content_part.added
        group: responses
        example: "{\n  \"type\": \"response.content_part.added\",\n  \"item_id\":\
          \ \"msg_123\",\n  \"output_index\": 0,\n  \"content_index\": 0,\n  \"part\"\
          : {\n    \"type\": \"output_text\",\n    \"text\": \"\",\n    \"annotations\"\
          : []\n  }\n}\n"
    ResponseRefusalDeltaEvent:
      type: object
      description: Emitted when there is a partial refusal text.
      properties:
        type:
          type: string
          description: 'The type of the event. Always `response.refusal.delta`.

            '
          enum:
          - response.refusal.delta
          x-stainless-const: true
        item_id:
          type: string
          description: 'The ID of the output item that the refusal text is added to.

            '
        output_index:
          type: integer
          description: 'The index of the output item that the refusal text is added
            to.

            '
        content_index:
          type: integer
          description: 'The index of the content part that the refusal text is added
            to.

            '
        delta:
          type: string
          description: 'The refusal text that is added.

            '
      required:
      - type
      - item_id
      - output_index
      - content_index
      - delta
      x-oaiMeta:
        name: response.refusal.delta
        group: responses
        example: "{\n  \"type\": \"response.refusal.delta\",\n  \"item_id\": \"msg_123\"\
          ,\n  \"output_index\": 0,\n  \"content_index\": 0,\n  \"delta\": \"refusal\
          \ text so far\"\n}\n"
    FunctionTool:
      properties:
        type:
          type: string
          enum:
          - function
          description: The type of the function tool. Always `function`.
          default: function
          x-stainless-const: true
        name:
          type: string
          description: The name of the function to call.
        description:
          anyOf:
          - type: string
            description: A description of the function. Used by the model to determine
              whether or not to call the function.
          - type: 'null'
        parameters:
          anyOf:
          - additionalProperties: {}
            type: object
            description: A JSON schema object describing the parameters of the function.
          - type: 'null'
        strict:
          anyOf:
          - type: boolean
            description: Whether to enforce strict parameter validation. Default `true`.
          - type: 'null'
      type: object
      required:
      - type
      - name
      - strict
      - parameters
      title: Function
      description: Defines a function in your own code the model can choose to call.
        Learn more about [function calling](https://platform.openai.com/docs/guides/function-calling).
    ResponseCodeInterpreterCallInterpretingEvent:
      type: object
      description: Emitted when the code interpreter is actively interpreting the
        code snippet.
      properties:
        type:
          type: string
          description: 'The type of the event. Always `response.code_interpreter_call.interpreting`.

            '
          enum:
          - response.code_interpreter_call.interpreting
          x-stainless-const: true
        output_index:
          type: integer
          description: 'The index of the output item that the code interpreter call
            is in progress.

            '
        code_interpreter_call:
          $ref: '#/components/schemas/CodeInterpreterToolCall'
      required:
      - type
      - response_id
      - output_index
      - code_interpreter_call
      x-oaiMeta:
        name: response.code_interpreter_call.interpreting
        group: responses
        example: "{\n  \"type\": \"response.code_interpreter_call.interpreting\",\n\
          \  \"response_id\": \"resp-123\",\n  \"output_index\": 4,\n  \"code_interpreter_call\"\
          : {}\n}\n"
    ResponseInProgressEvent:
      type: object
      description: Emitted when the response is in progress.
      properties:
        type:
          type: string
          description: 'The type of the event. Always `response.in_progress`.

            '
          enum:
          - response.in_progress
          x-stainless-const: true
        response:
          $ref: '#/components/schemas/Response'
          description: 'The response that is in progress.

            '
      required:
      - type
      - response
      x-oaiMeta:
        name: response.in_progress
        group: responses
        example: "{\n  \"type\": \"response.in_progress\",\n  \"response\": {\n  \
          \  \"id\": \"resp_67ccfcdd16748190a91872c75d38539e09e4d4aac714747c\",\n\
          \    \"object\": \"response\",\n    \"created_at\": 1741487325,\n    \"\
          status\": \"in_progress\",\n    \"error\": null,\n    \"incomplete_details\"\
          : null,\n    \"instructions\": null,\n    \"max_output_tokens\": null,\n\
          \    \"model\": \"gpt-4o-2024-08-06\",\n    \"output\": [],\n    \"parallel_tool_calls\"\
          : true,\n    \"previous_response_id\": null,\n    \"reasoning\": {\n   \
          \   \"effort\": null,\n      \"summary\": null\n    },\n    \"store\": true,\n\
          \    \"temperature\": 1,\n    \"text\": {\n      \"format\": {\n       \
          \ \"type\": \"text\"\n      }\n    },\n    \"tool_choice\": \"auto\",\n\
          \    \"tools\": [],\n    \"top_p\": 1,\n    \"truncation\": \"disabled\"\
          ,\n    \"usage\": null,\n    \"user\": null,\n    \"metadata\": {}\n  }\n\
          }\n"
    FilePath:
      type: object
      title: File path
      description: 'A path to a file.

        '
      properties:
        type:
          type: string
          description: 'The type of the file path. Always `file_path`.

            '
          enum:
          - file_path
          x-stainless-const: true
        file_id:
          type: string
          description: 'The ID of the file.

            '
        index:
          type: integer
          description: 'The index of the file in the list of files.

            '
      required:
      - type
      - file_id
      - index
    ResponseUsage:
      type: object
      description: 'Represents token usage details including input tokens, output
        tokens,

        a breakdown of output tokens, and the total tokens used.

        '
      properties:
        input_tokens:
          type: integer
          description: The number of input tokens.
        input_tokens_details:
          type: object
          description: A detailed breakdown of the input tokens.
          properties:
            cached_tokens:
              type: integer
              description: 'The number of tokens that were retrieved from the cache.

                [More on prompt caching](/docs/guides/prompt-caching).

                '
          required:
          - cached_tokens
        output_tokens:
          type: integer
          description: The number of output tokens.
        output_tokens_details:
          type: object
          description: A detailed breakdown of the output tokens.
          properties:
            reasoning_tokens:
              type: integer
              description: The number of reasoning tokens.
          required:
          - reasoning_tokens
        total_tokens:
          type: integer
          description: The total number of tokens used.
      required:
      - input_tokens
      - input_tokens_details
      - output_tokens
      - output_tokens_details
      - total_tokens
    DoubleClick:
      type: object
      title: DoubleClick
      description: 'A double click action.

        '
      properties:
        type:
          type: string
          enum:
          - double_click
          default: double_click
          description: 'Specifies the event type. For a double click action, this
            property is

            always set to `double_click`.

            '
          x-stainless-const: true
        x:
          type: integer
          description: 'The x-coordinate where the double click occurred.

            '
        y:
          type: integer
          description: 'The y-coordinate where the double click occurred.

            '
      required:
      - type
      - x
      - y
    ResponseTextDoneEvent:
      type: object
      description: Emitted when text content is finalized.
      properties:
        type:
          type: string
          description: 'The type of the event. Always `response.output_text.done`.

            '
          enum:
          - response.output_text.done
          x-stainless-const: true
        item_id:
          type: string
          description: 'The ID of the output item that the text content is finalized.

            '
        output_index:
          type: integer
          description: 'The index of the output item that the text content is finalized.

            '
        content_index:
          type: integer
          description: 'The index of the content part that the text content is finalized.

            '
        text:
          type: string
          description: 'The text content that is finalized.

            '
      required:
      - type
      - item_id
      - output_index
      - content_index
      - text
      x-oaiMeta:
        name: response.output_text.done
        group: responses
        example: "{\n  \"type\": \"response.output_text.done\",\n  \"item_id\": \"\
          msg_123\",\n  \"output_index\": 0,\n  \"content_index\": 0,\n  \"text\"\
          : \"In a shimmering forest under a sky full of stars, a lonely unicorn named\
          \ Lila discovered a hidden pond that glowed with moonlight. Every night,\
          \ she would leave sparkling, magical flowers by the water's edge, hoping\
          \ to share her beauty with others. One enchanting evening, she woke to find\
          \ a group of friendly animals gathered around, eager to be friends and share\
          \ in her magic.\"\n}\n"
    EasyInputMessage:
      type: object
      title: Input message
      description: 'A message input to the model with a role indicating instruction
        following

        hierarchy. Instructions given with the `developer` or `system` role take

        precedence over instructions given with the `user` role. Messages with the

        `assistant` role are presumed to have been generated by the model in previous

        interactions.

        '
      properties:
        role:
          type: string
          description: 'The role of the message input. One of `user`, `assistant`,
            `system`, or

            `developer`.

            '
          enum:
          - user
          - assistant
          - system
          - developer
        content:
          description: 'Text, image, or audio input to the model, used to generate
            a response.

            Can also contain previous assistant responses.

            '
          oneOf:
          - type: string
            title: Text input
            description: 'A text input to the model.

              '
          - $ref: '#/components/schemas/InputMessageContentList'
        type:
          type: string
          description: 'The type of the message input. Always `message`.

            '
          enum:
          - message
          x-stainless-const: true
      required:
      - role
      - content
    ModelIdsShared:
      example: gpt-4o
      anyOf:
      - type: string
      - type: string
        enum:
        - gpt-4.1
        - gpt-4.1-mini
        - gpt-4.1-nano
        - gpt-4.1-2025-04-14
        - gpt-4.1-mini-2025-04-14
        - gpt-4.1-nano-2025-04-14
        - o4-mini
        - o4-mini-2025-04-16
        - o3
        - o3-2025-04-16
        - o3-mini
        - o3-mini-2025-01-31
        - o1
        - o1-2024-12-17
        - o1-preview
        - o1-preview-2024-09-12
        - o1-mini
        - o1-mini-2024-09-12
        - gpt-4o
        - gpt-4o-2024-11-20
        - gpt-4o-2024-08-06
        - gpt-4o-2024-05-13
        - gpt-4o-audio-preview
        - gpt-4o-audio-preview-2024-10-01
        - gpt-4o-audio-preview-2024-12-17
        - gpt-4o-mini-audio-preview
        - gpt-4o-mini-audio-preview-2024-12-17
        - gpt-4o-search-preview
        - gpt-4o-mini-search-preview
        - gpt-4o-search-preview-2025-03-11
        - gpt-4o-mini-search-preview-2025-03-11
        - chatgpt-4o-latest
        - gpt-4o-mini
        - gpt-4o-mini-2024-07-18
        - gpt-4-turbo
        - gpt-4-turbo-2024-04-09
        - gpt-4-0125-preview
        - gpt-4-turbo-preview
        - gpt-4-1106-preview
        - gpt-4-vision-preview
        - gpt-4
        - gpt-4-0314
        - gpt-4-0613
        - gpt-4-32k
        - gpt-4-32k-0314
        - gpt-4-32k-0613
        - gpt-3.5-turbo
        - gpt-3.5-turbo-16k
        - gpt-3.5-turbo-0301
        - gpt-3.5-turbo-0613
        - gpt-3.5-turbo-1106
        - gpt-3.5-turbo-0125
        - gpt-3.5-turbo-16k-0613
    ResponseAudioTranscriptDeltaEvent:
      type: object
      description: Emitted when there is a partial transcript of audio.
      properties:
        type:
          type: string
          description: 'The type of the event. Always `response.audio.transcript.delta`.

            '
          enum:
          - response.audio.transcript.delta
          x-stainless-const: true
        delta:
          type: string
          description: 'The partial transcript of the audio response.

            '
      required:
      - type
      - response_id
      - delta
      x-oaiMeta:
        name: response.audio.transcript.delta
        group: responses
        example: "{\n  \"type\": \"response.audio.transcript.delta\",\n  \"response_id\"\
          : \"resp_123\",\n  \"delta\": \" ... partial transcript ... \"\n}\n"
    FunctionToolCall:
      type: object
      title: Function tool call
      description: 'A tool call to run a function. See the

        [function calling guide](/docs/guides/function-calling) for more information.

        '
      properties:
        id:
          type: string
          description: 'The unique ID of the function tool call.

            '
        type:
          type: string
          enum:
          - function_call
          description: 'The type of the function tool call. Always `function_call`.

            '
          x-stainless-const: true
        call_id:
          type: string
          description: 'The unique ID of the function tool call generated by the model.

            '
        name:
          type: string
          description: 'The name of the function to run.

            '
        arguments:
          type: string
          description: 'A JSON string of the arguments to pass to the function.

            '
        status:
          type: string
          description: 'The status of the item. One of `in_progress`, `completed`,
            or

            `incomplete`. Populated when items are returned via API.

            '
          enum:
          - in_progress
          - completed
          - incomplete
      required:
      - type
      - call_id
      - name
      - arguments
    InputMessageContentList:
      type: array
      title: Input item content list
      description: 'A list of one or many input items to the model, containing different
        content

        types.

        '
      items:
        $ref: '#/components/schemas/InputContent'
    WebSearchPreviewTool:
      properties:
        type:
          type: string
          enum:
          - web_search_preview
          - web_search_preview_2025_03_11
          description: The type of the web search tool. One of `web_search_preview`
            or `web_search_preview_2025_03_11`.
          default: web_search_preview
          x-stainless-const: true
        user_location:
          anyOf:
          - $ref: '#/components/schemas/ApproximateLocation'
            description: The user's location.
          - type: 'null'
        search_context_size:
          type: string
          enum:
          - low
          - medium
          - high
          description: High level guidance for the amount of context window space
            to use for the search. One of `low`, `medium`, or `high`. `medium` is
            the default.
      type: object
      required: *id001
      title: Web search preview
      description: This tool searches the web for relevant results to use in a response.
        Learn more about the [web search tool](https://platform.openai.com/docs/guides/tools-web-search).
    ResponseProperties:
      type: object
      properties:
        previous_response_id:
          type: string
          description: 'The unique ID of the previous response to the model. Use this
            to

            create multi-turn conversations. Learn more about

            [conversation state](/docs/guides/conversation-state).

            '
          nullable: true
        model:
          description: 'Model ID used to generate the response, like `gpt-4o` or `o3`.
            OpenAI

            offers a wide range of models with different capabilities, performance

            characteristics, and price points. Refer to the [model guide](/docs/models)

            to browse and compare available models.

            '
          $ref: '#/components/schemas/ModelIdsResponses'
        reasoning:
          $ref: '#/components/schemas/Reasoning'
          nullable: true
        max_output_tokens:
          description: 'An upper bound for the number of tokens that can be generated
            for a response, including visible output tokens and [reasoning tokens](/docs/guides/reasoning).

            '
          type: integer
          nullable: true
        instructions:
          type: string
          description: 'Inserts a system (or developer) message as the first item
            in the model''s context.


            When using along with `previous_response_id`, the instructions from a
            previous

            response will not be carried over to the next response. This makes it
            simple

            to swap out system (or developer) messages in new responses.

            '
          nullable: true
        text:
          type: object
          description: 'Configuration options for a text response from the model.
            Can be plain

            text or structured JSON data. Learn more:

            - [Text inputs and outputs](/docs/guides/text)

            - [Structured Outputs](/docs/guides/structured-outputs)

            '
          properties:
            format:
              $ref: '#/components/schemas/TextResponseFormatConfiguration'
        tools:
          type: array
          description: "An array of tools the model may call while generating a response.\
            \ You\ncan specify which tool to use by setting the `tool_choice` parameter.\n\
            \nThe two categories of tools you can provide the model are:\n\n- **Built-in\
            \ tools**: Tools that are provided by OpenAI that extend the\n  model's\
            \ capabilities, like [web search](/docs/guides/tools-web-search)\n  or\
            \ [file search](/docs/guides/tools-file-search). Learn more about\n  [built-in\
            \ tools](/docs/guides/tools).\n- **Function calls (custom tools)**: Functions\
            \ that are defined by you,\n  enabling the model to call your own code.\
            \ Learn more about\n  [function calling](/docs/guides/function-calling).\n"
          items:
            $ref: '#/components/schemas/Tool'
        tool_choice:
          description: 'How the model should select which tool (or tools) to use when
            generating

            a response. See the `tools` parameter to see how to specify which tools

            the model can call.

            '
          oneOf:
          - $ref: '#/components/schemas/ToolChoiceOptions'
          - $ref: '#/components/schemas/ToolChoiceTypes'
          - $ref: '#/components/schemas/ToolChoiceFunction'
        truncation:
          type: string
          description: "The truncation strategy to use for the model response.\n-\
            \ `auto`: If the context of this response and previous ones exceeds\n\
            \  the model's context window size, the model will truncate the\n  response\
            \ to fit the context window by dropping input items in the\n  middle of\
            \ the conversation.\n- `disabled` (default): If a model response will\
            \ exceed the context window\n  size for a model, the request will fail\
            \ with a 400 error.\n"
          enum:
          - auto
          - disabled
          nullable: true
          default: disabled
    CreateModelResponseProperties:
      allOf:
      - $ref: '#/components/schemas/ModelResponseProperties'
    ToolChoiceOptions:
      type: string
      title: Tool choice mode
      description: 'Controls which (if any) tool is called by the model.


        `none` means the model will not call any tool and instead generates a message.


        `auto` means the model can pick between generating a message or calling one
        or

        more tools.


        `required` means the model must call one or more tools.

        '
      enum:
      - none
      - auto
      - required
    ItemResource:
      description: 'Content item used to generate a response.

        '
      oneOf:
      - $ref: '#/components/schemas/InputMessageResource'
      - $ref: '#/components/schemas/OutputMessage'
      - $ref: '#/components/schemas/FileSearchToolCall'
      - $ref: '#/components/schemas/ComputerToolCall'
      - $ref: '#/components/schemas/ComputerToolCallOutputResource'
      - $ref: '#/components/schemas/WebSearchToolCall'
      - $ref: '#/components/schemas/FunctionToolCallResource'
      - $ref: '#/components/schemas/FunctionToolCallOutputResource'
      discriminator:
        propertyName: type
    Scroll:
      type: object
      title: Scroll
      description: 'A scroll action.

        '
      properties:
        type:
          type: string
          enum:
          - scroll
          default: scroll
          description: 'Specifies the event type. For a scroll action, this property
            is

            always set to `scroll`.

            '
          x-stainless-const: true
        x:
          type: integer
          description: 'The x-coordinate where the scroll occurred.

            '
        y:
          type: integer
          description: 'The y-coordinate where the scroll occurred.

            '
        scroll_x:
          type: integer
          description: 'The horizontal scroll distance.

            '
        scroll_y:
          type: integer
          description: 'The vertical scroll distance.

            '
      required:
      - type
      - x
      - y
      - scroll_x
      - scroll_y
    ComputerToolCall:
      type: object
      title: Computer tool call
      description: 'A tool call to a computer use tool. See the

        [computer use guide](/docs/guides/tools-computer-use) for more information.

        '
      properties:
        type:
          type: string
          description: The type of the computer call. Always `computer_call`.
          enum:
          - computer_call
          default: computer_call
        id:
          type: string
          description: The unique ID of the computer call.
        call_id:
          type: string
          description: 'An identifier used when responding to the tool call with output.

            '
        action:
          $ref: '#/components/schemas/ComputerAction'
        pending_safety_checks:
          type: array
          items:
            $ref: '#/components/schemas/ComputerToolCallSafetyCheck'
          description: 'The pending safety checks for the computer call.

            '
        status:
          type: string
          description: 'The status of the item. One of `in_progress`, `completed`,
            or

            `incomplete`. Populated when items are returned via API.

            '
          enum:
          - in_progress
          - completed
          - incomplete
      required:
      - type
      - id
      - action
      - call_id
      - pending_safety_checks
      - status
