// Code generated by cmd/lexgen (see Makefile's lexgen); DO NOT EDIT.

package vtri

// schema: app.vtri.activity.moment

import (
	"encoding/json"
	"fmt"

	comatprototypes "github.com/bluesky-social/indigo/api/atproto"
	appbskytypes "github.com/bluesky-social/indigo/api/bsky"
	"github.com/bluesky-social/indigo/lex/util"
)

func init() {
	util.RegisterType("app.vtri.activity.moment", &ActivityMoment{})
} //
// RECORDTYPE: ActivityMoment
type ActivityMoment struct {
	LexiconTypeID string `json:"$type,const=app.vtri.activity.moment" cborgen:"$type,const=app.vtri.activity.moment"`
	// createdAt: Client-declared timestamp when this post was originally created.
	CreatedAt string                         `json:"createdAt" cborgen:"createdAt"`
	Creator   *comatprototypes.RepoStrongRef `json:"creator,omitempty" cborgen:"creator,omitempty"`
	Embed     *ActivityMoment_Embed          `json:"embed,omitempty" cborgen:"embed,omitempty"`
	// facets: Annotations of text (mentions, URLs, hashtags, etc)
	Facets []*appbskytypes.RichtextFacet `json:"facets,omitempty" cborgen:"facets,omitempty"`
	// langs: Indicates human language of post primary text content.
	Langs []string                 `json:"langs,omitempty" cborgen:"langs,omitempty"`
	Reply *ActivityMoment_ReplyRef `json:"reply,omitempty" cborgen:"reply,omitempty"`
	// tags: Additional hashtags, in addition to any included in post text and facets.
	Tags []string `json:"tags,omitempty" cborgen:"tags,omitempty"`
	// text: The primary post content. May be an empty string, if there are embeds.
	Text string `json:"text" cborgen:"text"`
}

type ActivityMoment_Embed struct {
	EntityImages   *EntityImages
	EntityVideo    *EntityVideo
	EntityExternal *EntityExternal
	EntityRecord   *EntityRecord
}

func (t *ActivityMoment_Embed) MarshalJSON() ([]byte, error) {
	if t.EntityImages != nil {
		t.EntityImages.LexiconTypeID = "app.vtri.entity.images"
		return json.Marshal(t.EntityImages)
	}
	if t.EntityVideo != nil {
		t.EntityVideo.LexiconTypeID = "app.vtri.entity.video"
		return json.Marshal(t.EntityVideo)
	}
	if t.EntityExternal != nil {
		t.EntityExternal.LexiconTypeID = "app.vtri.entity.external"
		return json.Marshal(t.EntityExternal)
	}
	if t.EntityRecord != nil {
		t.EntityRecord.LexiconTypeID = "app.vtri.entity.record"
		return json.Marshal(t.EntityRecord)
	}
	return nil, fmt.Errorf("cannot marshal empty enum")
}
func (t *ActivityMoment_Embed) UnmarshalJSON(b []byte) error {
	typ, err := util.TypeExtract(b)
	if err != nil {
		return err
	}

	switch typ {
	case "app.vtri.entity.images":
		t.EntityImages = new(EntityImages)
		return json.Unmarshal(b, t.EntityImages)
	case "app.vtri.entity.video":
		t.EntityVideo = new(EntityVideo)
		return json.Unmarshal(b, t.EntityVideo)
	case "app.vtri.entity.external":
		t.EntityExternal = new(EntityExternal)
		return json.Unmarshal(b, t.EntityExternal)
	case "app.vtri.entity.record":
		t.EntityRecord = new(EntityRecord)
		return json.Unmarshal(b, t.EntityRecord)

	default:
		return nil
	}
}

//func (t *ActivityMoment_Embed) MarshalCBOR(w io.Writer) error {
//
//	if t == nil {
//		_, err := w.Write(cbg.CborNull)
//		return err
//	}
//	if t.EntityImages != nil {
//		return t.EntityImages.MarshalCBOR(w)
//	}
//	if t.EntityVideo != nil {
//		return t.EntityVideo.MarshalCBOR(w)
//	}
//	if t.EntityExternal != nil {
//		return t.EntityExternal.MarshalCBOR(w)
//	}
//	if t.EntityRecord != nil {
//		return t.EntityRecord.MarshalCBOR(w)
//	}
//	return fmt.Errorf("cannot cbor marshal empty enum")
//}
//func (t *ActivityMoment_Embed) UnmarshalCBOR(r io.Reader) error {
//	typ, b, err := util.CborTypeExtractReader(r)
//	if err != nil {
//		return err
//	}
//
//	switch typ {
//	case "app.vtri.entity.images":
//		t.EntityImages = new(EntityImages)
//		return t.EntityImages.UnmarshalCBOR(bytes.NewReader(b))
//	case "app.vtri.entity.video":
//		t.EntityVideo = new(EntityVideo)
//		return t.EntityVideo.UnmarshalCBOR(bytes.NewReader(b))
//	case "app.vtri.entity.external":
//		t.EntityExternal = new(EntityExternal)
//		return t.EntityExternal.UnmarshalCBOR(bytes.NewReader(b))
//	case "app.vtri.entity.record":
//		t.EntityRecord = new(EntityRecord)
//		return t.EntityRecord.UnmarshalCBOR(bytes.NewReader(b))
//
//	default:
//		return nil
//	}
//}

// ActivityMoment_ReplyRef is a "replyRef" in the app.vtri.activity.moment schema.
type ActivityMoment_ReplyRef struct {
	Parent *comatprototypes.RepoStrongRef `json:"parent" cborgen:"parent"`
	Root   *comatprototypes.RepoStrongRef `json:"root" cborgen:"root"`
}
