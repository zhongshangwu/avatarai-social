// Code generated by cmd/lexgen (see Makefile's lexgen); DO NOT EDIT.

package vtri

// schema: app.vtri.chat.aiChatStream

// ChatAiChatStream_CompletedEvent is a "CompletedEvent" in the app.vtri.chat.aiChatStream schema.
//
// # Emitted when the model response is complete
//
// RECORDTYPE: ChatAiChatStream_CompletedEvent
type ChatAiChatStream_CompletedEvent struct {
	LexiconTypeID string `json:"$type,const=app.vtri.chat.aiChatStream#CompletedEvent" cborgen:"$type,const=app.vtri.chat.aiChatStream#CompletedEvent"`
	// response: Properties of the completed response
	Response *ChatAiChat_Message `json:"response" cborgen:"response"`
}

// ChatAiChatStream_ContentPartAddedEvent is a "ContentPartAddedEvent" in the app.vtri.chat.aiChatStream schema.
//
// # Emitted when a new content part is added
//
// RECORDTYPE: ChatAiChatStream_ContentPartAddedEvent
type ChatAiChatStream_ContentPartAddedEvent struct {
	LexiconTypeID string `json:"$type,const=app.vtri.chat.aiChatStream#ContentPartAddedEvent" cborgen:"$type,const=app.vtri.chat.aiChatStream#ContentPartAddedEvent"`
	// contentIndex: The index of the content part that was added
	ContentIndex int64 `json:"contentIndex" cborgen:"contentIndex"`
	// itemId: The ID of the output item that the content part was added to
	ItemId string `json:"itemId" cborgen:"itemId"`
	// outputIndex: The index of the output item that the content part was added to
	OutputIndex int64 `json:"outputIndex" cborgen:"outputIndex"`
	// part: The content part that was added
	Part *ChatAiChat_OutputContent `json:"part" cborgen:"part"`
}

// ChatAiChatStream_ContentPartDoneEvent is a "ContentPartDoneEvent" in the app.vtri.chat.aiChatStream schema.
//
// # Emitted when a content part is done
//
// RECORDTYPE: ChatAiChatStream_ContentPartDoneEvent
type ChatAiChatStream_ContentPartDoneEvent struct {
	LexiconTypeID string `json:"$type,const=app.vtri.chat.aiChatStream#ContentPartDoneEvent" cborgen:"$type,const=app.vtri.chat.aiChatStream#ContentPartDoneEvent"`
	// contentIndex: The index of the content part that is done
	ContentIndex int64 `json:"contentIndex" cborgen:"contentIndex"`
	// itemId: The ID of the output item that the content part was added to
	ItemId string `json:"itemId" cborgen:"itemId"`
	// outputIndex: The index of the output item that the content part was added to
	OutputIndex int64 `json:"outputIndex" cborgen:"outputIndex"`
	// part: The content part that is done
	Part *ChatAiChat_OutputContent `json:"part" cborgen:"part"`
}

// ChatAiChatStream_CreatedEvent is a "CreatedEvent" in the app.vtri.chat.aiChatStream schema.
//
// # Emitted when a response is created
//
// RECORDTYPE: ChatAiChatStream_CreatedEvent
type ChatAiChatStream_CreatedEvent struct {
	LexiconTypeID string `json:"$type,const=app.vtri.chat.aiChatStream#CreatedEvent" cborgen:"$type,const=app.vtri.chat.aiChatStream#CreatedEvent"`
	// response: The response that was created
	Response *ChatAiChat_Message `json:"response" cborgen:"response"`
}

// ChatAiChatStream_ErrorEvent is a "ErrorEvent" in the app.vtri.chat.aiChatStream schema.
//
// # Emitted when an error occurs
//
// RECORDTYPE: ChatAiChatStream_ErrorEvent
type ChatAiChatStream_ErrorEvent struct {
	LexiconTypeID string `json:"$type,const=app.vtri.chat.aiChatStream#ErrorEvent" cborgen:"$type,const=app.vtri.chat.aiChatStream#ErrorEvent"`
	// code: The error code
	Code *string `json:"code" cborgen:"code"`
	// message: The error message
	Message string `json:"message" cborgen:"message"`
	// param: The error parameter
	Param *string `json:"param" cborgen:"param"`
}

// ChatAiChatStream_FailedEvent is a "FailedEvent" in the app.vtri.chat.aiChatStream schema.
//
// # An event that is emitted when a response fails
//
// RECORDTYPE: ChatAiChatStream_FailedEvent
type ChatAiChatStream_FailedEvent struct {
	LexiconTypeID string `json:"$type,const=app.vtri.chat.aiChatStream#FailedEvent" cborgen:"$type,const=app.vtri.chat.aiChatStream#FailedEvent"`
	// response: The response that failed
	Response *ChatAiChat_Message `json:"response" cborgen:"response"`
}

// ChatAiChatStream_InProgressEvent is a "InProgressEvent" in the app.vtri.chat.aiChatStream schema.
//
// # Emitted when the response is in progress
//
// RECORDTYPE: ChatAiChatStream_InProgressEvent
type ChatAiChatStream_InProgressEvent struct {
	LexiconTypeID string `json:"$type,const=app.vtri.chat.aiChatStream#InProgressEvent" cborgen:"$type,const=app.vtri.chat.aiChatStream#InProgressEvent"`
	// response: The response that is in progress
	Response *ChatAiChat_Message `json:"response" cborgen:"response"`
}

// ChatAiChatStream_IncompleteEvent is a "IncompleteEvent" in the app.vtri.chat.aiChatStream schema.
//
// # An event that is emitted when a response finishes as incomplete
//
// RECORDTYPE: ChatAiChatStream_IncompleteEvent
type ChatAiChatStream_IncompleteEvent struct {
	LexiconTypeID string `json:"$type,const=app.vtri.chat.aiChatStream#IncompleteEvent" cborgen:"$type,const=app.vtri.chat.aiChatStream#IncompleteEvent"`
	// response: The response that was incomplete
	Response *ChatAiChat_Message `json:"response" cborgen:"response"`
}

// ChatAiChatStream_InterruptEvent is a "InterruptEvent" in the app.vtri.chat.aiChatStream schema.
//
// # AI聊天中断事件
//
// RECORDTYPE: ChatAiChatStream_InterruptEvent
type ChatAiChatStream_InterruptEvent struct {
	LexiconTypeID string `json:"$type,const=app.vtri.chat.aiChatStream#InterruptEvent" cborgen:"$type,const=app.vtri.chat.aiChatStream#InterruptEvent"`
}

// ChatAiChatStream_OutputItemAddedEvent is a "OutputItemAddedEvent" in the app.vtri.chat.aiChatStream schema.
//
// # Emitted when a new output item is added
//
// RECORDTYPE: ChatAiChatStream_OutputItemAddedEvent
type ChatAiChatStream_OutputItemAddedEvent struct {
	LexiconTypeID string `json:"$type,const=app.vtri.chat.aiChatStream#OutputItemAddedEvent" cborgen:"$type,const=app.vtri.chat.aiChatStream#OutputItemAddedEvent"`
	// item: The output item that was added
	Item *ChatAiChat_OutputItem `json:"item" cborgen:"item"`
	// outputIndex: The index of the output item that was added
	OutputIndex int64 `json:"outputIndex" cborgen:"outputIndex"`
}

// ChatAiChatStream_OutputItemDoneEvent is a "OutputItemDoneEvent" in the app.vtri.chat.aiChatStream schema.
//
// # Emitted when an output item is marked done
//
// RECORDTYPE: ChatAiChatStream_OutputItemDoneEvent
type ChatAiChatStream_OutputItemDoneEvent struct {
	LexiconTypeID string `json:"$type,const=app.vtri.chat.aiChatStream#OutputItemDoneEvent" cborgen:"$type,const=app.vtri.chat.aiChatStream#OutputItemDoneEvent"`
	// item: The output item that was marked done
	Item *ChatAiChat_OutputItem `json:"item" cborgen:"item"`
	// outputIndex: The index of the output item that was marked done
	OutputIndex int64 `json:"outputIndex" cborgen:"outputIndex"`
}

// ChatAiChatStream_ReasoningSummaryPartAddedEvent is a "ReasoningSummaryPartAddedEvent" in the app.vtri.chat.aiChatStream schema.
//
// # Emitted when a reasoning summary part is added
//
// RECORDTYPE: ChatAiChatStream_ReasoningSummaryPartAddedEvent
type ChatAiChatStream_ReasoningSummaryPartAddedEvent struct {
	LexiconTypeID string `json:"$type,const=app.vtri.chat.aiChatStream#ReasoningSummaryPartAddedEvent" cborgen:"$type,const=app.vtri.chat.aiChatStream#ReasoningSummaryPartAddedEvent"`
	// contentIndex: The index of the content part that the reasoning summary part was added to
	ContentIndex int64 `json:"contentIndex" cborgen:"contentIndex"`
	// itemId: The ID of the output item that the reasoning summary part was added to
	ItemId string `json:"itemId" cborgen:"itemId"`
	// outputIndex: The index of the output item that the reasoning summary part was added to
	OutputIndex int64 `json:"outputIndex" cborgen:"outputIndex"`
}

// ChatAiChatStream_ReasoningSummaryPartDoneEvent is a "ReasoningSummaryPartDoneEvent" in the app.vtri.chat.aiChatStream schema.
//
// # Emitted when a reasoning summary part is done
//
// RECORDTYPE: ChatAiChatStream_ReasoningSummaryPartDoneEvent
type ChatAiChatStream_ReasoningSummaryPartDoneEvent struct {
	LexiconTypeID string `json:"$type,const=app.vtri.chat.aiChatStream#ReasoningSummaryPartDoneEvent" cborgen:"$type,const=app.vtri.chat.aiChatStream#ReasoningSummaryPartDoneEvent"`
	// contentIndex: The index of the content part that the reasoning summary part was added to
	ContentIndex int64 `json:"contentIndex" cborgen:"contentIndex"`
	// itemId: The ID of the output item that the reasoning summary part was added to
	ItemId string `json:"itemId" cborgen:"itemId"`
	// outputIndex: The index of the output item that the reasoning summary part was added to
	OutputIndex int64 `json:"outputIndex" cborgen:"outputIndex"`
	// text: The text of the reasoning summary part
	Text string `json:"text" cborgen:"text"`
}

// ChatAiChatStream_ReasoningSummaryTextDeltaEvent is a "ReasoningSummaryTextDeltaEvent" in the app.vtri.chat.aiChatStream schema.
//
// # Emitted when there is a delta in the reasoning summary text
//
// RECORDTYPE: ChatAiChatStream_ReasoningSummaryTextDeltaEvent
type ChatAiChatStream_ReasoningSummaryTextDeltaEvent struct {
	LexiconTypeID string `json:"$type,const=app.vtri.chat.aiChatStream#ReasoningSummaryTextDeltaEvent" cborgen:"$type,const=app.vtri.chat.aiChatStream#ReasoningSummaryTextDeltaEvent"`
	// contentIndex: The index of the content part that the reasoning summary text delta was added to
	ContentIndex int64 `json:"contentIndex" cborgen:"contentIndex"`
	// delta: The delta text that was added to the reasoning summary
	Delta string `json:"delta" cborgen:"delta"`
	// itemId: The ID of the output item that the reasoning summary text delta was added to
	ItemId string `json:"itemId" cborgen:"itemId"`
	// outputIndex: The index of the output item that the reasoning summary text delta was added to
	OutputIndex int64 `json:"outputIndex" cborgen:"outputIndex"`
}

// ChatAiChatStream_ReasoningSummaryTextDoneEvent is a "ReasoningSummaryTextDoneEvent" in the app.vtri.chat.aiChatStream schema.
//
// # Emitted when the reasoning summary text is done
//
// RECORDTYPE: ChatAiChatStream_ReasoningSummaryTextDoneEvent
type ChatAiChatStream_ReasoningSummaryTextDoneEvent struct {
	LexiconTypeID string `json:"$type,const=app.vtri.chat.aiChatStream#ReasoningSummaryTextDoneEvent" cborgen:"$type,const=app.vtri.chat.aiChatStream#ReasoningSummaryTextDoneEvent"`
	// contentIndex: The index of the content part that the reasoning summary text was added to
	ContentIndex int64 `json:"contentIndex" cborgen:"contentIndex"`
	// itemId: The ID of the output item that the reasoning summary text was added to
	ItemId string `json:"itemId" cborgen:"itemId"`
	// outputIndex: The index of the output item that the reasoning summary text was added to
	OutputIndex int64 `json:"outputIndex" cborgen:"outputIndex"`
	// text: The complete reasoning summary text
	Text string `json:"text" cborgen:"text"`
}

// ChatAiChatStream_RefusalDeltaEvent is a "RefusalDeltaEvent" in the app.vtri.chat.aiChatStream schema.
//
// # Emitted when there is a delta in the refusal text
//
// RECORDTYPE: ChatAiChatStream_RefusalDeltaEvent
type ChatAiChatStream_RefusalDeltaEvent struct {
	LexiconTypeID string `json:"$type,const=app.vtri.chat.aiChatStream#RefusalDeltaEvent" cborgen:"$type,const=app.vtri.chat.aiChatStream#RefusalDeltaEvent"`
	// contentIndex: The index of the content part that the refusal delta was added to
	ContentIndex int64 `json:"contentIndex" cborgen:"contentIndex"`
	// delta: The delta text that was added to the refusal
	Delta string `json:"delta" cborgen:"delta"`
	// itemId: The ID of the output item that the refusal delta was added to
	ItemId string `json:"itemId" cborgen:"itemId"`
	// outputIndex: The index of the output item that the refusal delta was added to
	OutputIndex int64 `json:"outputIndex" cborgen:"outputIndex"`
}

// ChatAiChatStream_RefusalDoneEvent is a "RefusalDoneEvent" in the app.vtri.chat.aiChatStream schema.
//
// # Emitted when the refusal text is done
//
// RECORDTYPE: ChatAiChatStream_RefusalDoneEvent
type ChatAiChatStream_RefusalDoneEvent struct {
	LexiconTypeID string `json:"$type,const=app.vtri.chat.aiChatStream#RefusalDoneEvent" cborgen:"$type,const=app.vtri.chat.aiChatStream#RefusalDoneEvent"`
	// contentIndex: The index of the content part that the refusal text was added to
	ContentIndex int64 `json:"contentIndex" cborgen:"contentIndex"`
	// itemId: The ID of the output item that the refusal text was added to
	ItemId string `json:"itemId" cborgen:"itemId"`
	// outputIndex: The index of the output item that the refusal text was added to
	OutputIndex int64 `json:"outputIndex" cborgen:"outputIndex"`
	// text: The complete refusal text
	Text string `json:"text" cborgen:"text"`
}

// ChatAiChatStream_TextAnnotationDeltaEvent is a "TextAnnotationDeltaEvent" in the app.vtri.chat.aiChatStream schema.
//
// # Emitted when a text annotation is added
//
// RECORDTYPE: ChatAiChatStream_TextAnnotationDeltaEvent
type ChatAiChatStream_TextAnnotationDeltaEvent struct {
	LexiconTypeID string `json:"$type,const=app.vtri.chat.aiChatStream#TextAnnotationDeltaEvent" cborgen:"$type,const=app.vtri.chat.aiChatStream#TextAnnotationDeltaEvent"`
	// annotation: The annotation that was added
	Annotation *ChatAiChat_Annotation `json:"annotation" cborgen:"annotation"`
	// annotationIndex: The index of the annotation that was added
	AnnotationIndex int64 `json:"annotationIndex" cborgen:"annotationIndex"`
	// contentIndex: The index of the content part that the text annotation was added to
	ContentIndex int64 `json:"contentIndex" cborgen:"contentIndex"`
	// itemId: The ID of the output item that the text annotation was added to
	ItemId string `json:"itemId" cborgen:"itemId"`
	// outputIndex: The index of the output item that the text annotation was added to
	OutputIndex int64 `json:"outputIndex" cborgen:"outputIndex"`
}

// ChatAiChatStream_TextDeltaEvent is a "TextDeltaEvent" in the app.vtri.chat.aiChatStream schema.
//
// # Emitted when there is an additional text delta
//
// RECORDTYPE: ChatAiChatStream_TextDeltaEvent
type ChatAiChatStream_TextDeltaEvent struct {
	LexiconTypeID string `json:"$type,const=app.vtri.chat.aiChatStream#TextDeltaEvent" cborgen:"$type,const=app.vtri.chat.aiChatStream#TextDeltaEvent"`
	// contentIndex: The index of the content part that the text delta was added to
	ContentIndex int64 `json:"contentIndex" cborgen:"contentIndex"`
	// delta: The text delta that was added
	Delta string `json:"delta" cborgen:"delta"`
	// itemId: The ID of the output item that the text delta was added to
	ItemId string `json:"itemId" cborgen:"itemId"`
	// outputIndex: The index of the output item that the text delta was added to
	OutputIndex int64 `json:"outputIndex" cborgen:"outputIndex"`
}

// ChatAiChatStream_TextDoneEvent is a "TextDoneEvent" in the app.vtri.chat.aiChatStream schema.
//
// # Emitted when text content is finalized
//
// RECORDTYPE: ChatAiChatStream_TextDoneEvent
type ChatAiChatStream_TextDoneEvent struct {
	LexiconTypeID string `json:"$type,const=app.vtri.chat.aiChatStream#TextDoneEvent" cborgen:"$type,const=app.vtri.chat.aiChatStream#TextDoneEvent"`
	// contentIndex: The index of the content part that the text content is finalized
	ContentIndex int64 `json:"contentIndex" cborgen:"contentIndex"`
	// itemId: The ID of the output item that the text content is finalized
	ItemId string `json:"itemId" cborgen:"itemId"`
	// outputIndex: The index of the output item that the text content is finalized
	OutputIndex int64 `json:"outputIndex" cborgen:"outputIndex"`
	// text: The text content that is finalized
	Text string `json:"text" cborgen:"text"`
}
