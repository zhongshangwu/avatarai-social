// Code generated by cmd/lexgen (see Makefile's lexgen); DO NOT EDIT.

package vtri

// schema: app.vtri.chat.message

import (
	"github.com/bluesky-social/indigo/lex/util"
)

func init() {
	util.RegisterType("app.vtri.chat.message", &ChatMessage{})
} //
// RECORDTYPE: ChatMessage
type ChatMessage struct {
	LexiconTypeID string `json:"$type,const=app.vtri.chat.message" cborgen:"$type,const=app.vtri.chat.message"`
	// content: 消息的实际内容，以JSON字符串格式存储，根据msgType不同有不同的结构
	Content string `json:"content" cborgen:"content"`
	// createdAt: 消息创建的时间戳（毫秒级Unix时间戳），表示系统记录的创建时间
	CreatedAt int64 `json:"createdAt" cborgen:"createdAt"`
	// deleted: 标记消息是否已被撤回或删除，影响消息的显示状态
	Deleted *bool `json:"deleted,omitempty" cborgen:"deleted,omitempty"`
	// id: 消息的唯一标识符，用于引用和检索特定消息
	Id string `json:"id" cborgen:"id"`
	// msgType: 消息的类型标识，决定如何解析和显示消息内容
	MsgType int64 `json:"msgType" cborgen:"msgType"`
	// parentId: 直接被回复消息的ID，用于建立消息之间的直接回复关系
	ParentId *string `json:"parentId,omitempty" cborgen:"parentId,omitempty"`
	// quoteId: 被引用消息的ID，用于实现消息引用功能
	QuoteId *string `json:"quoteId,omitempty" cborgen:"quoteId,omitempty"`
	// roomId: 消息所属聊天室的唯一标识符，表示消息的发送位置
	RoomId string `json:"roomId" cborgen:"roomId"`
	// rootId: 对于嵌套回复，指向最顶层消息的ID，用于构建完整的消息树结构
	RootId *string `json:"rootId,omitempty" cborgen:"rootId,omitempty"`
	// senderAt: 消息发送的时间戳（毫秒级Unix时间戳），表示用户实际发送的时间
	SenderAt int64 `json:"senderAt" cborgen:"senderAt"`
	// senderId: 消息发送者的唯一标识符，用于关联用户信息和权限验证
	SenderId string `json:"senderId" cborgen:"senderId"`
	// threadId: 消息所属的话题或线程ID，用于组织相关消息
	ThreadId *string `json:"threadId,omitempty" cborgen:"threadId,omitempty"`
	// updatedAt: 消息最后更新的时间戳（毫秒级Unix时间戳），用于跟踪消息的修改历史
	UpdatedAt int64 `json:"updatedAt" cborgen:"updatedAt"`
}
