
syntax = "proto3";
package step.heimdall.realtimeagent;

option go_package = "gitlab.basemind.com/proto/heimdall/realtimeagent";

import "heimdall/rtcproxy/rtcproxy.proto";


message RealtimeSessionCreateEvent {
  string session_id = 1;
  int64 uid = 2;
  RealtimeSessionUpdateEvent ev = 3;
}

message TurnDetection {
  string type = 1;
}

// client event start
message RealtimeSessionUpdateEvent {
  repeated string modalities = 1;
  string instructions = 2;
  string voice = 3;
  double temperature = 4;
  TurnDetection turn_detection = 5;
  repeated ClientConversationItem history_temp = 6; // 临时版本history，后续完备版本使用history字段
  // repeated ClientConversationItem history = 7; 升级ConversationItem有content list
  ToolCall tool_call = 8;
  SessionInternalExtra internal_extra = 99; //阶跃专用的配置
}

message ToolCall {
  bool enabled = 1;
}

message RealtimeSessionCloseEvent {
}

message InputAudioBufferAppendEvent {
  repeated step.heimdall.rtcproxy.AudioFrame audios = 1;
}

message InputAudioBufferCommitEvent {
  string transcript = 1;
  string language = 2;
}

message InputAudioBufferClearEvent {
}

message ConversationItemContent {
  string type = 1;
  string text = 2;
  repeated step.heimdall.rtcproxy.AudioFrame audios = 3;
  string transcript = 4;
  string raw_text = 5;
}

message ClientConversationItem {
  string id = 1;
  string type = 2;
  string status = 3;
  string role = 4;
  ConversationItemContent content = 5;
  int32 no = 6;
}


message ConversationItemCreateEvent {
  string previous_item_id = 1;
  ClientConversationItem item = 2;
}

message ConversationItemDeleteEvent {
  string item_id = 1;
  int32 no = 2;
}

message ResponseStatusDetail {
  string type = 1;
  string reason = 2;

}

message ResponseCreateEvent {
  repeated string modalities = 1;
  string instructions = 2;
  string voice = 3;
  double temperature = 4;
  repeated ClientConversationItem input = 5;
  int32 no = 6;
}


message ResponseCancelEvent {
}

// client event end


// server event start
enum RiskLevel {
  RISK_LEVEL_UNSPECIFIED = 0;
  RISK_LEVEL_LEVEL1 = 1;
  RISK_LEVEL_LEVEL2 = 2;
}

message RiskDetail {
  RiskLevel level = 1;
}

enum ErrorType {
  ERROR_TYPE_UNSPECIFIED = 0;
  ERROR_TYPE_SERVER_ERROR = 1;
  ERROR_TYPE_INVALID_REQUEST_ERROR = 2;
}

enum ErrorCode {
  ERROR_CODE_UNSPECIFIED = 0;
  ERROR_CODE_CONTENT_BLOCKED = 1;
  ERROR_CODE_NO_RESPONSE_TO_CANCEL = 2;
  ERROR_CODE_ONGOING_RESPONSE_ALREADY_EXISTS = 3;
}

message ErrorEvent {
  ErrorType type = 1;
  ErrorCode code = 2;
  string msg = 3;
  string param = 4;
  string event_id = 5;
  oneof detail {
    RiskDetail risk = 6;
  }
}

message RealtimeSessionCreatedEvent {
  repeated string modalities = 1;
  string instructions = 2;
  string voice = 3;
  double temperature = 4;
  TurnDetection turn_detection = 5;
  string session_id = 6;
}

message RealtimeSessionUpdatedEvent {
  repeated string modalities = 1;
  string instructions = 2;
  string voice = 3;
  double temperature = 4;
  TurnDetection turn_detection = 5;
}

message ConverstationCreatedEvent {
  string id = 1;
}

message ServerConversationContent {
  string type = 1;
  string text = 2;
  string audio = 3;
  string transcript = 4;
}

message ServerConversationItem {
  string id = 1;
  string type = 2;
  string status = 3;
  string role = 4;
  repeated ServerConversationContent content = 5;
  int32 no = 6;
}

message ConversationItemCreatedEvent {
  string previous_item_id = 1;
  ServerConversationItem item = 2;
}

message ConversationItemDeletedEvent {
  string item_id = 1;
}

message ConversationItemInputAudioTranscriptionCompletedEvent {
  string item_id = 1;
  int64  content_index = 2;
  string transcript = 3;
}

message InputAudioBufferCommittedEvent {
  string previous_item_id = 1;
  string item_id = 2;
}

message InputAudioBufferClearedEvent {
}

message StatusError {
  string type = 1;
  string code = 2;
}

message StatusDetails {
  string type = 1;
  string reason = 2;
  StatusError error = 3;
}

message ResponseCreated {
  string id = 1;
  string status = 2;
  StatusDetails status_detail = 3;
  repeated ServerConversationItem output = 4;
}

message ResponseCreatedEvent {
  ResponseCreated response = 1;
}

message InputTokenDetail {
  int64 cached_tokens = 1;
  int64 text_tokens = 2;
  int64 audio_tokens = 3;
}

message OutputTokenDetail {
  int64 text_tokens = 1;
  int64 audio_tokens = 2;
}

message Usage {
  int64 total_tokens = 1;
  int64 input_tokens = 2;
  int64 output_tokens = 3;
  InputTokenDetail input_token_details = 4;
  OutputTokenDetail output_token_details = 5;
}

message ResponseDone {
  string id  = 1;
  string status = 2;
  StatusDetails status_detail = 3;
  repeated ServerConversationItem output = 4;
  Usage usage = 5;
}

message ResponseDoneEvent {
  ResponseDone response = 1;
}

message ResponseOutputItemAddedEvent {
  string response_id = 1;
  int64 output_index = 2;
  ServerConversationItem item = 3;
}

message ResponseOutputItemDoneEvent {
  string response_id = 1;
  int64 output_index = 2;
  ServerConversationItem item = 3;
}

message ResponseAudioDeltaEvent {
  string response_id = 1;
  string item_id = 2;
  int64 output_index = 3;
  int64 content_index = 4;
  step.heimdall.rtcproxy.AudioFrame audio = 5;
}

message ResponseAudioDoneEvent {
  string response_id = 1;
  string item_id = 2;
  int64 output_index = 3;
  int64 content_index = 4;
}

message ResponseAudioTranscriptDeltaEvent {
  string response_id = 1;
  string item_id = 2;
  int64 output_index = 3;
  int64 content_index = 4;
  string delta = 5;
}

message ResponseAudioTranscriptDoneEvent {
  string response_id = 1;
  string item_id = 2;
  int64 output_index = 3;
  int64 content_index = 4;
  string transcript = 5;
}

message ContentPart {
  string type = 1;
  string text = 2;
  string audio = 3;
  string transcript = 4;
}

message ResponseContentPartAddedEvent {
  string response_id = 1;
  string item_id = 2;
  int64 output_index = 3;
  int64 content_index = 4;
  ContentPart part = 5;
}

message ResponseContentPartDoneEvent {
  string response_id = 1;
  string item_id = 2;
  int64 output_index = 3;
  int64 content_index = 4;
  ContentPart part = 5;
}

message ConversationItemTruncateEvent {
  string item_id = 1;
  int64  content_index = 2;
  int64 audio_end_ms = 3;
}

message ConversationItemTruncatedEvent {
  string item_id = 1;
  int64  content_index = 2;
  int64 audio_end_ms = 3;
}

message InputAudioBufferSpeechStartedEvent {
  int64 audio_start_ms = 1;
  string item_id = 2;
}

message InputAudioBufferSpeechStoppedEvent {
  int64 audio_end_ms = 1;
  string item_id = 2;
}


// server event end

message EventExtraParams {
  string turn_id = 1;
}

enum RouterEnv {
  RounterEnvProd = 0;
  RouterEnvEval = 1;
}

message RouterConfig {
  string host = 1;
  RouterEnv env = 2;
}

message ModelSvcConfig {
  string endpoint = 1;
  string model = 2;
  string direct = 3;
  RouterConfig router = 4;
}

message VadSvcConfig {
  ModelSvcConfig service_config = 1;
  int32 energy_awakeness_threshold = 2;
  int32 snr_awakeness_threshold = 3;
  int32 snr_awakeness_decay_threshold = 4;
  int32 snr_awakeness_decay_factor = 5;
  int32 snr_max_noise_length = 6;

  map<string, float> params = 7;
}


message AQTASvcConfig {
  enum ReturnType {
    RETURN_TYPE_UNKNOWN = 0; // 未定义，目前默认 text
    RETURN_TYPE_TEXT = 1; // 纯文字 -> 输出后需要 tts
    RETURN_TYPE_AUDIO_TOKEN = 2; // 类似 <audio_xxx> -> 输出后需要 token2audio 和 asr
    RETURN_TYPE_AUDIO_TOKEN_AND_TEXT = 3; // 类似 <audio_xxx>+文字 -> 输出后需要 token2audio
  }

  enum InputType {
    INPUT_TYPE_UNKNOWN = 0; // 未定义，目前默认 audio token，另外模型都默认支持 text 输入
    INPUT_TYPE_AUDIO_TOKEN = 1; // 支持 audio token，支持 text 输入
    INPUT_TYPE_WAV = 2; // 支持原生 wav 输入，支持 text 输入
  }

  ModelSvcConfig service_config = 1;
  // 返回类型，决定了如何生成声音
  ReturnType return_type = 2;
  // 输入类型，决定了内容组织形式，所有模型默认支持 TEXT 输入
  InputType input_type = 3;
}

message TTSSvcConfig {
  ModelSvcConfig service_config = 1;
}

message AsrSvcConfig {
  ModelSvcConfig service_config = 1;
}

message Wav2TokenConfig {
   ModelSvcConfig service_config = 1;
}

message Token2AudioConfig {
   ModelSvcConfig service_config = 1;
}

message ScpConfig {
  string prompt_scene_id = 1;
  string audio_response_scene_id = 2;
  string biz_type = 3;
  string endpoint = 4;
  string token = 5;
  bool disable_scp = 6;
}

message SessionInternalExtra {
  VadSvcConfig vad_svc = 1;
  AQTASvcConfig aqta_svc = 2;
  TTSSvcConfig tts_svc = 3;
  AsrSvcConfig asr_mini_svc = 4;  // 当前轮的asr
  AsrSvcConfig asr_svc = 5;       // 历史asr
  Wav2TokenConfig wav2_token_svc = 6;
  Token2AudioConfig token2_audio_svc = 7;
  ScpConfig scp_config = 8;
}

message RealtimeClientEvent {
  string event_id = 1;
  // string type = 2; 废弃
  EventExtraParams extra = 3;
  oneof event {
    RealtimeSessionCreateEvent session_create = 4;
    RealtimeSessionUpdateEvent session_update = 5;
    RealtimeSessionCloseEvent session_close = 6;

    InputAudioBufferAppendEvent input_audio_buffer_append = 7;
    InputAudioBufferCommitEvent input_audio_buffer_commit = 8;
    InputAudioBufferClearEvent input_audio_buffer_clear = 9;

    ConversationItemCreateEvent conversation_item_create = 10;
    ConversationItemDeleteEvent conversation_item_delete = 11;

    ResponseCreateEvent response_create = 12;
    ResponseCancelEvent response_cancel = 13;

    ConversationItemTruncateEvent conversation_item_truncate = 14;
  }
}

message RealtimeServerEvent {
  string event_id = 1;
  // string type = 2; 废弃
  oneof event {
    ErrorEvent error = 3;

    RealtimeSessionCreatedEvent session_created = 4;
    RealtimeSessionUpdatedEvent session_updated = 5;

    ConverstationCreatedEvent converstation_created = 6;
    ConversationItemCreatedEvent conversation_item_created = 7;
    ConversationItemDeletedEvent conversation_item_deleted = 8;

    InputAudioBufferCommittedEvent input_audio_buffer_committed = 9;
    InputAudioBufferClearedEvent input_audio_buffer_cleared = 10;

    ResponseCreatedEvent response_created = 11;
    ResponseDoneEvent response_done = 12;
    ResponseOutputItemAddedEvent response_output_item_added = 13;
    ResponseOutputItemDoneEvent response_output_item_done = 14;
    ResponseAudioDeltaEvent response_audio_delta = 15;
    ResponseAudioDoneEvent response_audio_done = 16;
    ResponseAudioTranscriptDeltaEvent response_audio_transcript_delta = 17;
    ResponseAudioTranscriptDoneEvent response_audio_transcript_done = 18;

    ConversationItemInputAudioTranscriptionCompletedEvent conversation_item_input_audio_transcription_completed = 19;

    ResponseContentPartAddedEvent response_content_part_added = 20;
    ResponseContentPartDoneEvent response_content_part_done = 21;

    ConversationItemTruncateEvent conversation_item_truncated = 22;

    InputAudioBufferSpeechStartedEvent input_audio_buffer_speech_started = 23;
    InputAudioBufferSpeechStoppedEvent input_audio_buffer_speech_stopped = 24;
  }
}
解释