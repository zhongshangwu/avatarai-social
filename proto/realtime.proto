syntax = "proto3";
package step.heimdall.realtimeagent;

option go_package = "gitlab.basemind.com/proto/heimdall/realtimeagent";

import "heimdall/rtcproxy/rtcproxy.proto";
import "trpc/api/annotations.proto";
import "trpc/proto/trpc_options.proto";
import "realtime_events.proto";
import "omni_client_events.proto";
import "omni_server_events.proto";


message RTCNodeInfo {
  string host = 1;
  int32 port = 2;
}

message AVParams {
  // upstream: 业务侧接收
  int32 upstream_audio_sample_rate = 1;
  int32 upstream_audio_channels = 2;
  // audio format 固定s16le
  int32 upstream_image_interval = 3;

  // downstream: 用户接收
  // audio format 固定s16le
  // bit rate单位：bit/s
  int32 downstream_audio_bit_rate = 4;
  int32 downstream_audio_sample_rate = 5;
  int32 downstream_audio_channels = 6;
}

enum CloseReason {
  // 未指定关闭原因，作为默认值
  CLOSE_REASON_UNSPECIFIED = 0;

  // 用户主动离开房间（正常结束）
  CLOSE_REASON_USER_EXIT = 1;

  // 房间会话到达超时时间（业务限制由业务系统下发）
  CLOSE_REASON_SESSION_TIMEOUT = 2;

  // 服务端主动关闭房间（如管理操作或计划任务）
  CLOSE_REASON_SERVER_CLOSE = 3;

  // 网络连接断开导致会话关闭
  CLOSE_REASON_NETWORK_DISCONNECT = 4;

  // 用户输入内容安全监测未通过
  CLOSE_REASON_USER_RISK = 5;

  // 模型输出内容安全监测未通过
  CLOSE_REASON_BOT_RISK = 6;

  // 服务端检测到用户长时间无操作（如闲置超时）
  CLOSE_REASON_IDLE_TIMEOUT = 7;

  // 系统错误导致关闭（如未捕获的异常）
  CLOSE_REASON_SYSTEM_ERROR = 99;
}

enum BotStatus {
  BOT_STATUS_UNSPECIFIED = 0;
  BOT_STATUS_SPEAKING = 1;
  BOT_STATUS_THINKING = 2;
  BOT_STATUS_LISTENING = 3;
}

enum Role {
  ROLE_UNSPECIFIED = 0;
  ROLE_USER = 1;
  ROLE_BOT = 2;
}

message TextContent{
  string text = 1;
}

message MessageContent{
  oneof content{
    TextContent text = 1;
  }
}

message Message {
  int32 round = 1;  // 轮次
  repeated MessageContent Content = 2;
  Role role = 3;
}

message ConverseClientEvent {
  string event_id = 1;
  oneof event {
    CreateSessionEvent create_session = 2;
    CloseSessionEvent close_session = 3;
    InterruptEvent interrupt = 4;
    ChangeVoiceEvent change_voice = 5;
    ResumeEvent resume = 6;
    SwitchVideoStreamEvent switch_video_stream = 7;
  }
}

// 客户端进行输入模式的切换
message SwitchVideoStreamEvent {
  enum HistoryStrategy {
    Auto = 0;
    Discard = 1; // 删除上下文
    Preserve = 2; // 保留历史，如果历史里面有图片，就会继续用 vaqta
  }
  bool with_video = 1;
  HistoryStrategy strategy = 2;
}

message ResumeEvent {}

// 业务端需要主动结束时发送
message CloseSessionEvent { CloseReason reason = 1; }

// 用户账户信息
message OasisHeader {
  int32 app_id = 1;
  string did = 2;
  string web_id = 3;
  string platform = 4;
  int64  buvid = 5;
  string extra_did = 6;
  string os_name = 7;
  string os_version = 8;
  string channel = 9;
  string device_brand = 10;
  string device_model = 11;
  string app_version = 12;
  string version_code = 13;
  string network_carrier = 14;
  string network_type = 15;
  string time_zone = 16;
}

message TTSParams {
  string voice_id = 1;
}

message ToolCallParams {
  bool enabled = 1;
}

message ReplayTurnParams {
  bool enabled = 1;

  string bot_text = 2;
  string user_text = 3;
}

message ProfileParams {
  string mode = 1; // "kid_mode" 儿童模式 | "tool_call_mode" 带 tool_call
  string language = 2; // 期望回复的语言
}

// 由业务端发出的事件，告知Agent用户和房间信息
message CreateSessionEvent {
  int64 user_id = 7; // stepchat 用户 id
  int64 chat_id = 8;
  string user_ident = 1;
  string room_id = 2;
  string bot_id = 3;
  string session_id = 4;
  RTCNodeInfo node_info = 5;
  AVParams av_params = 6;
  OasisHeader oasis_header = 9;
  TTSParams tts_params = 10;
  ToolCallParams tool_call_params = 11;
  ReplayTurnParams replay_turn_params = 12;
  ProfileParams profile_params = 13; // 人设配置

  BackdoorConfig backdoor_config = 99;
}

message BackdoorConfig {
  string agent = 1;

  string aqta_endpoint = 10;
  string aqta_model = 11;

  string asr_endpoint = 20;
  string asr_model = 21;

  string asr_mini_endpoint = 30;
  string asr_mini_model = 31;
}

// 无论之前bot是什么状态，收到该事件都会进入LISTENING状态
// 状态切换完成后会给业务端发送BotStatusEvent
message InterruptEvent {
}

message ChangeVoiceEvent {
  string voice_id = 1;
  string profile_mode = 2; // 儿童模式 "kid_mode" | "tool_call" 带 tool_call | ""
}

message VoiceChangedEvent {
  string voice_id = 1;
}

message NotificationEvent {
  string content = 1; // 客户端应对此响应，弹出提示给用户
}

// 当发生安全事件，需要告诉客户端清除某轮的输出内容
message ResetTurnOutputEvent {
  int32 turn = 1;
}

// 当发生严重安全事件，客户端需要响应这个事件删除这轮的问题+回复
message ResetTurnEvent {
  int32 turn = 1;
  string risk_level = 2; // 如果是安全
}

message ChangeAgentOptionsEvent {
  string system_prompt = 1;
  float temperature = 2;
  float top_p = 3;
  float frequency_penalty = 4;
  double volume_ratio = 5;
  double speak_speed_ratio = 6;
}

message AgentOptionsChangedEvent {
  string system_prompt = 1;
  float temperature = 2;
  float top_p = 3;
  float frequency_penalty = 4;
  double volume_ratio = 5;
  double speak_speed_ratio = 6;
}

message ChangeConfigEvent {
  VadSvcConfig vad_svc = 1;
  AQTASvcConfig aqta_svc = 2;
  TTSSvcConfig tts_svc = 3;
  AsrSvcConfig asr_mini_svc = 4;
  AsrSvcConfig asr_svc = 5;
  Wav2TokenConfig wav2_token_svc = 6;
  Token2AudioConfig token2_audio_svc = 7;
}

message ConfigChangedEvent {
  VadSvcConfig vad_svc = 1;
  AQTASvcConfig aqta_svc = 2;
  TTSSvcConfig tts_svc = 3;
  AsrSvcConfig asr_mini_svc = 4;
  AsrSvcConfig asr_svc = 5;
  Wav2TokenConfig wav2_token_svc = 6;
  Token2AudioConfig token2_audio_svc = 7;
}

// api专用，用户主动结束一轮，和InterruptEvent不同点会触发推理
message TurnEndEvent{
}

message HistoryResetEvent {}

message ConverseServerEvent {
  string event_id = 1;
  oneof event {
    SessionCreatedEvent session_created = 2;
    SessionClosedEvent session_closed = 3;
    BotStatusEvent bot_status = 4;
    HistoryAppendEvent history_append = 5;
    MessageDeltaEvent message_delta = 6;
    VoiceChangedEvent voice_changed = 7;
    NotificationEvent notification = 8;
    ResetTurnOutputEvent reset_turn_output = 9;
    ResetTurnEvent reset_turn = 10;
    HistoryResetEvent history_reset = 11;
  }
}

enum MessageStatus {
  MESSAGE_STATUS_UNSPECIFIED = 0;
  MESSAGE_STATUS_CREATED = 1;
  MESSAGE_STATUS_COMPLETED = 2;
}

message MessageDeltaEvent {
  int32 turn = 1;
  Role role = 2;
  string delta = 3;
  MessageStatus status = 4;
}

// 当数据面链路已经准备好时，告知业务端
message SessionCreatedEvent { string session_id = 1; }

// Agent结束Session时发送给业务端，可能是CloseSessionEvent的回应
// 也可能是Agent主动结束时用来告知业务端
message SessionClosedEvent { CloseReason reason = 1; }

// bot解析完一条历史消息时发送给业务端
message HistoryAppendEvent {
  Message message = 1;
}

message BotStatusEvent {
  BotStatus status = 1;
  int32 turn = 2;
}

message GetTraceLogRequest {
  string session_id = 1;
}

message GetTraceLogResponse {
  repeated string urls = 1;
}

message TraceLogDetailItem {
  string file_name = 1;
  string download_url = 2;
  string meta_url = 3;
  string audio_url = 4;
  int32 file_size = 5;
}

message TraceLogDetailResponse {
  repeated TraceLogDetailItem logs = 1;
}

service ConverseService {
  rpc Converse(stream ConverseClientEvent) returns (stream ConverseServerEvent);
  rpc Realtime(stream RealtimeClientEvent) returns (stream RealtimeServerEvent);
  rpc Omni(stream OmniClientEvent) returns (stream OmniServerEvent);
  rpc OmniStateless(stream OmniClientEvent) returns (stream OmniServerEvent);
}

service TraceLogService {
  rpc GetTraceLog(GetTraceLogRequest) returns (GetTraceLogResponse){
    option (trpc.alias) = "/tracelog";
  };
  rpc TraceLogDetail(GetTraceLogRequest) returns (TraceLogDetailResponse){
    option (trpc.alias) = "/tracelog/detail";
  };
}

message AudioEvent {
  step.heimdall.rtcproxy.AudioFrame audio = 1;
}

message ImageEvent {
  step.heimdall.rtcproxy.ImageFrame image = 1;
}

message BotInputEvent {
  string event_id = 1;
  oneof event {
    AudioEvent audio = 2;
    InterruptEvent interrupt = 3;
    ImageEvent image = 4;
    ChangeVoiceEvent change_voice = 5;
    TurnEndEvent turn_end = 6;
    HistoryResetEvent history_reset = 7; // 要求 bot 清除上下文
    ResumeEvent resume = 8;
    ChangeAgentOptionsEvent change_agent_options = 9; // 切换agent的参数，目前只有api有用到
    ChangeConfigEvent change_config = 10; // 切换aqta服务的配置，现在只有对sales的app有用到
  }
}

message InputUnderstaningEvent {
}

message AnswerEvent {
  repeated step.heimdall.rtcproxy.AudioFrame audios = 1;
  repeated MessageContent content = 2;
}


// 一轮结束后的事件
message TurnFinishedEvent{
  int32 turn = 1;
  bool interruptted = 2;
}

message BotOutputEvent {
  string event_id = 1;
  oneof event {
    BotStatusEvent bot_status = 2;
    InputUnderstaningEvent input_understanding = 3;
    AnswerEvent answer = 4;
    HistoryAppendEvent history_append = 5;
    InterruptEvent interrupt = 6;
    MessageDeltaEvent message_delta = 7;
    VoiceChangedEvent voice_changed = 8;
    NotificationEvent notification = 9;
    ResetTurnOutputEvent reset_turn_output = 10; // 发生安全事件时，业务应该删除这个 turn 的回复
    ResetTurnEvent reset_turn = 11; // 当发生严重安全时，触发此事件，业务应该把这个 turn 都删除
    HistoryResetEvent history_reset = 12; // 历史被重置后的事件
    AgentOptionsChangedEvent agent_options_changed = 13;
    ConfigChangedEvent config_changed = 14;
    ErrorEvent error = 15;
    TurnFinishedEvent turn_finished = 16;
  }
}